angular.module('App')
        .component('antroprometric', {
            templateUrl: 'javascript/antroprometric/antroprometric.component.html',
            controller: 'AntroController',
            bindings: {
                weigth: '<',
                size: '<',
                sex: '<',
                birthdate: '<',
                waistCircunference: '<',
                personType: '@',
                pregnantAge: '<',
                notificationProvince: '<',
                residenceProvince: '<',
                headCircunference: '<',
                armCircunference: '<',
                cleanData: '<'
            }
        })
        .factory("antroprometricService", [function () {
                var nutritionalData = {};
                nutritionalData[6] = {obesity: 30.0, weight: {from: 25.0, to: 30.0}, normal: {from: 20.0, to: 24.9}, thin: 20.0};
                nutritionalData[7] = {obesity: 30.0, weight: {from: 25.0, to: 30.0}, normal: {from: 20.1, to: 24.9}, thin: 20.1};
                nutritionalData[8] = {obesity: 30.1, weight: {from: 25.1, to: 30.1}, normal: {from: 20.2, to: 25.0}, thin: 20.2};
                nutritionalData[9] = {obesity: 30.2, weight: {from: 25.2, to: 30.2}, normal: {from: 20.2, to: 25.1}, thin: 20.2};
                nutritionalData[10] = {obesity: 30.2, weight: {from: 25.3, to: 30.2}, normal: {from: 20.3, to: 25.2}, thin: 20.3};
                nutritionalData[11] = {obesity: 30.3, weight: {from: 25.4, to: 30.3}, normal: {from: 20.4, to: 25.3}, thin: 20.4};
                nutritionalData[12] = {obesity: 30.3, weight: {from: 25.5, to: 30.3}, normal: {from: 20.5, to: 25.4}, thin: 20.5};
                nutritionalData[13] = {obesity: 30.4, weight: {from: 25.7, to: 30.4}, normal: {from: 20.7, to: 25.6}, thin: 20.7};
                nutritionalData[14] = {obesity: 30.5, weight: {from: 25.8, to: 30.5}, normal: {from: 20.8, to: 25.7}, thin: 20.8};
                nutritionalData[15] = {obesity: 30.6, weight: {from: 25.9, to: 30.6}, normal: {from: 20.9, to: 25.8}, thin: 20.9};
                nutritionalData[16] = {obesity: 30.7, weight: {from: 26.0, to: 30.7}, normal: {from: 21.1, to: 25.9}, thin: 21.1};
                nutritionalData[17] = {obesity: 30.8, weight: {from: 26.1, to: 30.8}, normal: {from: 21.2, to: 26.0}, thin: 21.2};
                nutritionalData[18] = {obesity: 30.9, weight: {from: 26.2, to: 30.9}, normal: {from: 21.3, to: 26.1}, thin: 21.3};
                nutritionalData[19] = {obesity: 30.9, weight: {from: 26.3, to: 30.9}, normal: {from: 21.5, to: 26.2}, thin: 21.5};
                nutritionalData[20] = {obesity: 31.0, weight: {from: 26.4, to: 31.0}, normal: {from: 21.6, to: 26.3}, thin: 21.6};
                nutritionalData[21] = {obesity: 31.1, weight: {from: 26.5, to: 31.1}, normal: {from: 21.8, to: 26.4}, thin: 21.8};
                nutritionalData[22] = {obesity: 31.2, weight: {from: 26.7, to: 31.2}, normal: {from: 21.9, to: 26.6}, thin: 21.9};
                nutritionalData[23] = {obesity: 31.3, weight: {from: 26.8, to: 31.3}, normal: {from: 22.1, to: 26.7}, thin: 22.1};
                nutritionalData[24] = {obesity: 31.5, weight: {from: 27.0, to: 31.5}, normal: {from: 22.3, to: 26.9}, thin: 22.3};
                nutritionalData[25] = {obesity: 31.6, weight: {from: 27.1, to: 31.6}, normal: {from: 22.5, to: 27.0}, thin: 22.5};
                nutritionalData[26] = {obesity: 31.7, weight: {from: 27.2, to: 31.7}, normal: {from: 22.7, to: 27.2}, thin: 22.7};
                nutritionalData[27] = {obesity: 31.8, weight: {from: 27.4, to: 31.8}, normal: {from: 22.8, to: 27.3}, thin: 22.8};
                nutritionalData[28] = {obesity: 31.9, weight: {from: 27.6, to: 31.9}, normal: {from: 23.0, to: 27.5}, thin: 23.0};
                nutritionalData[29] = {obesity: 32.0, weight: {from: 27.7, to: 32.0}, normal: {from: 23.2, to: 27.6}, thin: 23.2};
                nutritionalData[30] = {obesity: 32.1, weight: {from: 27.9, to: 32.1}, normal: {from: 23.4, to: 27.8}, thin: 23.4};
                nutritionalData[31] = {obesity: 32.2, weight: {from: 28.0, to: 32.2}, normal: {from: 23.5, to: 27.9}, thin: 23.5};
                nutritionalData[32] = {obesity: 32.3, weight: {from: 28.1, to: 32.3}, normal: {from: 23.7, to: 28.0}, thin: 23.7};
                nutritionalData[33] = {obesity: 32.4, weight: {from: 28.2, to: 32.4}, normal: {from: 23.9, to: 28.1}, thin: 23.9};
                nutritionalData[34] = {obesity: 32.5, weight: {from: 28.4, to: 32.5}, normal: {from: 24.0, to: 28.3}, thin: 24.0};
                nutritionalData[35] = {obesity: 32.6, weight: {from: 28.5, to: 32.6}, normal: {from: 24.2, to: 28.4}, thin: 24.2};
                nutritionalData[36] = {obesity: 32.7, weight: {from: 28.6, to: 32.7}, normal: {from: 24.3, to: 28.5}, thin: 24.3};
                nutritionalData[37] = {obesity: 32.8, weight: {from: 28.8, to: 32.8}, normal: {from: 24.5, to: 28.7}, thin: 24.5};
                nutritionalData[38] = {obesity: 32.9, weight: {from: 28.9, to: 32.9}, normal: {from: 24.6, to: 28.8}, thin: 24.6};
                nutritionalData[39] = {obesity: 33.0, weight: {from: 29.0, to: 33.0}, normal: {from: 24.8, to: 28.9}, thin: 24.8};
                nutritionalData[40] = {obesity: 33.1, weight: {from: 29.2, to: 33.1}, normal: {from: 25.0, to: 29.1}, thin: 25.0};
                nutritionalData[41] = {obesity: 33.2, weight: {from: 29.3, to: 33.2}, normal: {from: 25.1, to: 29.2}, thin: 25.1};
                nutritionalData[42] = {obesity: 33.2, weight: {from: 29.3, to: 33.2}, normal: {from: 25.1, to: 29.2}, thin: 25.1};
                var sizeAgeData = {
                    boy: {
                        two: {
                            negativeThree: [44.2, 48.9, 52.4, 55.3, 57.6, 59.6, 61.2, 62.7, 64.0, 65.2, 66.4, 67.6, 68.6, 69.6, 70.6, 71.6, 72.5, 73.3, 74.2, 75.0, 75.8, 76.5, 77.2, 78.0, 78.7],
                            negativeTwo: [46.1, 50.8, 54.4, 57.3, 59.7, 61.7, 63.3, 64.8, 66.2, 67.5, 68.7, 69.9, 71.0, 72.1, 73.1, 74.1, 75.0, 76.0, 76.9, 77.7, 78.6, 79.4, 80.2, 81.0, 81.7],
                            negativeOne: [48.0, 52.8, 56.4, 59.4, 61.8, 63.8, 65.5, 67.0, 68.4, 69.7, 71.0, 72.2, 73.4, 74.5, 75.6, 76.6, 77.6, 78.6, 79.6, 80.5, 81.4, 82.3, 83.1, 83.9, 84.8],
                            zero: [49.9, 54.7, 58.4, 61.4, 63.9, 65.9, 67.6, 69.2, 70.6, 72.0, 73.3, 74.5, 75.7, 76.9, 78.0, 79.1, 80.2, 81.2, 82.3, 83.2, 84.2, 85.1, 86.0, 86.9, 87.8],
                            positiveOne: [51.8, 56.7, 60.4, 63.5, 66.0, 68.0, 69.8, 71.3, 72.8, 74.2, 75.6, 76.9, 78.1, 79.3, 80.5, 81.7, 82.8, 83.9, 85.0, 86.0, 87.0, 88.0, 89.0, 89.9, 90.9],
                            positiveTwo: [53.7, 58.6, 62.4, 65.5, 68.0, 70.1, 71.9, 73.5, 75.0, 76.5, 77.9, 79.2, 80.5, 81.8, 83.0, 84.2, 85.4, 86.5, 87.7, 88.8, 89.8, 90.9, 91.9, 92.9, 93.9],
                            positiveThree: [55.6, 60.6, 64.4, 67.6, 70.1, 72.2, 74.0, 75.7, 77.2, 78.7, 80.1, 81.5, 82.9, 84.2, 85.5, 86.7, 88.0, 89.2, 90.4, 91.5, 92.6, 93.8, 94.9, 95.9, 97.0],
                            xLabels: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]
                        },
                        five: {
                            negativeThree: [78.0, 78.6, 79.3, 79.9, 80.5, 81.1, 81.7, 82.3, 82.8, 83.4, 83.9, 84.4, 85.0, 85.5, 86.0, 86.5, 87.0, 87.5, 88.0, 88.4, 88.9, 89.4, 89.8, 90.3, 90.7, 91.2, 91.6, 92.1, 92.5, 93.0, 93.4, 93.9, 94.3, 94.7, 95.2, 95.6, 96.1],
                            negativeTwo: [81.0, 81.7, 82.5, 83.1, 83.8, 84.5, 85.1, 85.7, 86.4, 86.9, 87.5, 88.1, 88.7, 89.2, 89.8, 90.3, 90.9, 91.4, 91.9, 92.4, 93.0, 93.5, 94.0, 94.4, 94.9, 95.4, 95.9, 96.4, 96.9, 97.4, 97.8, 98.3, 98.8, 99.3, 99.7, 100.2, 100.7],
                            negativeOne: [84.1, 84.9, 85.6, 86.4, 87.1, 87.8, 88.5, 89.2, 89.9, 90.5, 91.1, 91.8, 92.4, 93.0, 93.6, 94.2, 94.7, 95.3, 95.9, 96.4, 97.0, 97.5, 98.1, 98.6, 99.1, 99.7, 100.2, 100.7, 101.2, 101.7, 102.3, 102.8, 103.3, 103.8, 104.3, 104.8, 105.3],
                            zero: [87.1, 88.0, 88.8, 89.6, 90.4, 91.2, 91.9, 92.7, 93.4, 94.1, 94.8, 95.4, 96.1, 96.7, 97.4, 98.0, 98.6, 99.2, 99.9, 100.4, 101.0, 101.6, 102.2, 102.8, 103.3, 103.9, 104.4, 105.0, 105.6, 106.1, 106.7, 107.2, 107.8, 108.3, 108.9, 109.4, 110.0],
                            positiveOne: [90.2, 91.1, 92.0, 92.9, 93.7, 94.5, 95.3, 96.1, 96.9, 97.6, 98.4, 99.1, 99.8, 100.5, 101.2, 101.8, 102.5, 103.2, 103.8, 104.5, 105.1, 105.7, 106.3, 106.9, 107.5, 108.1, 108.7, 109.3, 109.9, 110.5, 111.1, 111.7, 112.3, 112.8, 113.4, 114.0, 114.6],
                            positiveTwo: [93.2, 94.2, 95.2, 96.1, 97.0, 97.9, 98.7, 99.6, 100.4, 101.2, 102.0, 102.7, 103.5, 104.2, 105.0, 105.7, 106.4, 107.1, 107.8, 108.5, 109.1, 109.8, 110.4, 111.1, 111.7, 112.4, 113.0, 113.6, 114.2, 114.9, 115.5, 116.1, 116.7, 117.4, 118.0, 118.6, 119.2],
                            positiveThree: [96.3, 97.3, 98.3, 99.3, 100.3, 101.2, 102.1, 103.0, 103.9, 104.8, 105.6, 106.4, 107.2, 108.0, 108.8, 109.5, 110.3, 111.0, 111.7, 112.5, 113.2, 113.9, 114.6, 115.2, 115.9, 116.6, 117.3, 117.9, 118.6, 119.2, 119.9, 120.6, 121.2, 121.9, 122.6, 123.2, 123.9],
                            xLabels: [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60]
                        }
                    },
                    girl: {
                        two: {
                            negativeThree: [43.6, 47.8, 51.0, 53.5, 55.6, 57.4, 58.9, 60.3, 61.7, 62.9, 64.1, 65.2, 66.3, 67.3, 68.3, 69.3, 70.2, 71.1, 72.0, 72.8, 73.7, 74.5, 75.2, 76.0, 76.7],
                            negativeTwo: [45.4, 49.8, 53.0, 55.6, 57.8, 59.6, 61.2, 62.7, 64.0, 65.3, 66.5, 67.7, 68.9, 70.0, 71.0, 72.0, 73.0, 74.0, 74.9, 75.8, 76.7, 77.5, 78.4, 79.2, 80.0],
                            negativeOne: [47.3, 51.7, 55.0, 57.7, 59.9, 61.8, 63.5, 65.0, 66.4, 67.7, 69.0, 70.3, 71.4, 72.6, 73.7, 74.8, 75.8, 76.8, 77.8, 78.8, 79.7, 80.6, 81.5, 82.3, 83.2],
                            zero: [49.1, 53.7, 57.1, 59.8, 62.1, 64.0, 65.7, 67.3, 68.7, 70.1, 71.5, 72.8, 74.0, 75.2, 76.4, 77.5, 78.6, 79.7, 80.7, 81.7, 82.7, 83.7, 84.6, 85.5, 86.4],
                            positiveOne: [51.0, 55.6, 59.1, 61.9, 64.3, 66.2, 68.0, 69.6, 71.1, 72.6, 73.9, 75.3, 76.6, 77.8, 79.1, 80.2, 81.4, 82.5, 83.6, 84.7, 85.7, 86.7, 87.7, 88.7, 89.6],
                            positiveTwo: [52.9, 57.6, 61.1, 64.0, 66.4, 68.5, 70.3, 71.9, 73.5, 75.0, 76.4, 77.8, 79.2, 80.5, 81.7, 83.0, 84.2, 85.4, 86.5, 87.6, 88.7, 89.8, 90.8, 91.9, 92.9],
                            positiveThree: [54.7, 59.5, 63.2, 66.1, 68.6, 70.7, 72.5, 74.2, 75.8, 77.4, 78.9, 80.3, 81.7, 83.1, 84.4, 85.7, 87.0, 88.2, 89.4, 90.6, 91.7, 92.9, 94.0, 95.0, 96.1],
                            xLabels: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]
                        },
                        five: {
                            negativeThree: [76.0, 76.8, 77.5, 78.1, 78.8, 79.5, 80.1, 80.7, 81.3, 81.9, 82.5, 83.1, 83.6, 84.2, 84.7, 85.3, 85.8, 86.3, 86.8, 87.4, 87.9, 88.4, 88.9, 89.3, 89.8, 90.3, 90.7, 91.2, 91.7, 92.1, 92.6, 93.0, 93.4, 93.9, 94.3, 94.7, 95.2],
                            negativeTwo: [79.3, 80.0, 80.8, 81.5, 82.2, 82.9, 83.6, 84.3, 84.9, 85.6, 86.2, 86.8, 87.4, 88.0, 88.6, 89.2, 89.8, 90.4, 90.9, 91.5, 92.0, 92.5, 93.1, 93.6, 94.1, 94.6, 95.1, 95.6, 96.1, 96.6, 97.1, 97.6, 98.1, 98.5, 99.0, 99.5, 99.9],
                            negativeOne: [82.5, 83.3, 84.1, 84.9, 85.7, 86.4, 87.1, 87.9, 88.6, 89.3, 89.9, 90.6, 91.2, 91.9, 92.5, 93.1, 93.8, 94.4, 95.0, 95.6, 96.2, 96.7, 97.3, 97.9, 98.4, 99.0, 99.5, 100.1, 100.6, 101.1, 101.6, 102.2, 102.7, 103.2, 103.7, 104.2, 104.7],
                            zero: [85.7, 86.6, 87.4, 88.3, 89.1, 89.9, 90.7, 91.4, 92.2, 92.9, 93.6, 94.4, 95.1, 95.7, 96.4, 97.1, 97.7, 98.4, 99.0, 99.7, 100.3, 100.9, 101.5, 102.1, 102.7, 103.3, 103.9, 104.5, 105.0, 105.6, 106.2, 106.7, 107.3, 107.8, 108.4, 108.9, 109.4],
                            positiveOne: [88.9, 89.9, 90.8, 91.7, 92.5, 93.4, 94.2, 95.0, 95.8, 96.6, 97.4, 98.1, 98.9, 99.6, 100.3, 101.0, 101.7, 102.4, 103.1, 103.8, 104.5, 105.1, 105.8, 106.4, 107.0, 107.7, 108.3, 108.9, 109.5, 110.1, 110.7, 111.3, 111.9, 112.5, 113.0, 113.6, 114.2],
                            positiveTwo: [92.2, 93.1, 94.1, 95.0, 96.0, 96.9, 97.7, 98.6, 99.4, 100.3, 101.1, 101.9, 102.7, 103.4, 104.2, 105.0, 105.7, 106.4, 107.2, 107.9, 108.6, 109.3, 110.0, 110.7, 111.3, 112.0, 112.7, 113.3, 114.0, 114.6, 115.2, 115.9, 116.5, 117.1, 117.7, 118.3, 118.9],
                            positiveThree: [95.4, 96.4, 97.4, 98.4, 99.4, 100.3, 101.3, 102.2, 103.1, 103.9, 104.8, 105.6, 106.5, 107.3, 108.1, 108.9, 109.7, 110.5, 111.2, 112.0, 112.7, 113.5, 114.2, 114.9, 115.7, 116.4, 117.1, 117.7, 118.4, 119.1, 119.8, 120.4, 121.1, 121.8, 122.4, 123.1, 123.7],
                            xLabels: [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60]
                        }
                    }
                };
                var weightAgeData = {
                    boy: {
                        two: {
                            negativeThree: [2.1, 2.9, 3.8, 4.4, 4.9, 5.3, 5.7, 5.9, 6.2, 6.4, 6.6, 6.8, 6.9, 7.1, 7.2, 7.4, 7.5, 7.7, 7.8, 8.0, 8.1, 8.2, 8.4, 8.5, 8.6],
                            negativeTwo: [2.5, 3.4, 4.3, 5.0, 5.6, 6.0, 6.4, 6.7, 6.9, 7.1, 7.4, 7.6, 7.7, 7.9, 8.1, 8.3, 8.4, 8.6, 8.8, 8.9, 9.1, 9.2, 9.4, 9.5, 9.7],
                            negativeOne: [2.9, 3.9, 4.9, 5.7, 6.2, 6.7, 7.1, 7.4, 7.7, 8.0, 8.2, 8.4, 8.6, 8.8, 9.0, 9.2, 9.4, 9.6, 9.8, 10.0, 10.1, 10.3, 10.5, 10.7, 10.8],
                            zero: [3.3, 4.5, 5.6, 6.4, 7.0, 7.5, 7.9, 8.3, 8.6, 8.9, 9.2, 9.4, 9.6, 9.9, 10.1, 10.3, 10.5, 10.7, 10.9, 11.1, 11.3, 11.5, 11.8, 12.0, 12.2],
                            positiveOne: [3.9, 5.1, 6.3, 7.2, 7.8, 8.4, 8.8, 9.2, 9.6, 9.9, 10.2, 10.5, 10.8, 11.0, 11.3, 11.5, 11.7, 12.0, 12.2, 12.5, 12.7, 12.9, 13.2, 13.4, 13.6],
                            positiveTwo: [4.4, 5.8, 7.1, 8.0, 8.7, 9.3, 9.8, 10.3, 10.7, 11.0, 11.4, 11.7, 12.0, 12.3, 12.6, 12.8, 13.1, 13.4, 13.7, 13.9, 14.2, 14.5, 14.7, 15.0, 15.3],
                            positiveThree: [5.0, 6.6, 8.0, 9.0, 9.7, 10.4, 10.9, 11.4, 11.9, 12.3, 12.7, 13.0, 13.3, 13.7, 14.0, 14.3, 14.6, 14.9, 15.3, 15.6, 15.9, 16.2, 16.5, 16.8, 17.1],
                            xLabels: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]
                        },
                        five: {
                            negativeThree: [8.6, 8.8, 8.9, 9.0, 9.1, 9.2, 9.4, 9.5, 9.6, 9.7, 9.8, 9.9, 10.0, 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.8, 10.9, 11.0, 11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7, 11.8, 11.9, 12.0, 12.1, 12.2, 12.3, 12.4],
                            negativeTwo: [9.7, 9.8, 10.0, 10.1, 10.2, 10.4, 10.5, 10.7, 10.8, 10.9, 11.0, 11.2, 11.3, 11.4, 11.5, 11.6, 11.8, 11.9, 12.0, 12.1, 12.2, 12.4, 12.5, 12.6, 12.7, 12.8, 12.9, 13.1, 13.2, 13.3, 13.4, 13.5, 13.6, 13.7, 13.8, 14.0, 14.1],
                            negativeOne: [10.8, 11.0, 11.2, 11.3, 11.5, 11.7, 11.8, 12.0, 12.1, 12.3, 12.4, 12.6, 12.7, 12.9, 13.0, 13.1, 13.3, 13.4, 13.6, 13.7, 13.8, 14.0, 14.1, 14.3, 14.4, 14.5, 14.7, 14.8, 15.0, 15.1, 15.2, 15.4, 15.5, 15.6, 15.8, 15.9, 16.0],
                            zero: [12.2, 12.4, 12.5, 12.7, 12.9, 13.1, 13.3, 13.5, 13.7, 13.8, 14.0, 14.2, 14.3, 14.5, 14.7, 14.8, 15.0, 15.2, 15.3, 15.5, 15.7, 15.8, 16.0, 16.2, 16.3, 16.5, 16.7, 16.8, 17.0, 17.2, 17.3, 17.5, 17.7, 17.8, 18.0, 18.2, 18.3],
                            positiveOne: [13.6, 13.9, 14.1, 14.3, 14.5, 14.8, 15.0, 15.2, 15.4, 15.6, 15.8, 16.0, 16.2, 16.4, 16.6, 16.8, 17.0, 17.2, 17.4, 17.6, 17.8, 18.0, 18.2, 18.4, 18.6, 18.8, 19.0, 19.2, 19.4, 19.6, 19.8, 20.0, 20.2, 20.4, 20.6, 20.8, 21.0],
                            positiveTwo: [15.3, 15.5, 15.8, 16.1, 16.3, 16.6, 16.9, 17.1, 17.4, 17.6, 17.8, 18.1, 18.3, 18.6, 18.8, 19.0, 19.3, 19.5, 19.7, 20.0, 20.2, 20.5, 20.7, 20.9, 21.2, 21.4, 21.7, 21.9, 22.2, 22.4, 22.7, 22.9, 23.2, 23.4, 23.7, 23.9, 24.2],
                            positiveThree: [17.1, 17.5, 17.8, 18.1, 18.4, 18.7, 19.0, 19.3, 19.6, 19.9, 20.2, 20.4, 20.7, 21.0, 21.3, 21.6, 21.9, 22.1, 22.4, 22.7, 23.0, 23.3, 23.6, 23.9, 24.2, 24.5, 24.8, 25.1, 25.4, 25.7, 26.0, 26.3, 26.6, 26.9, 27.2, 27.6, 27.9],
                            xLabels: [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60]
                        }
                    },
                    girl: {
                        two: {
                            negativeThree: [2.0, 2.7, 3.4, 4.0, 4.4, 4.8, 5.1, 5.3, 5.6, 5.8, 5.9, 6.1, 6.3, 6.4, 6.6, 6.7, 6.9, 7.0, 7.2, 7.3, 7.5, 7.6, 7.8, 7.9],
                            negativeTwo: [2.4, 3.2, 3.9, 4.5, 5.0, 5.4, 5.7, 6.0, 6.3, 6.5, 6.7, 6.9, 7.0, 7.2, 7.4, 7.6, 7.7, 7.9, 8.1, 8.2, 8.4, 8.6, 8.7, 8.9],
                            negativeOne: [2.8, 3.6, 4.5, 5.2, 5.7, 6.1, 6.5, 6.8, 7.0, 7.3, 7.5, 7.7, 7.9, 8.1, 8.3, 8.5, 8.7, 8.9, 9.1, 9.2, 9.4, 9.6, 9.8, 10.0],
                            zero: [3.2, 4.2, 5.1, 5.8, 6.4, 6.9, 7.3, 7.6, 7.9, 8.2, 8.5, 8.7, 8.9, 9.2, 9.4, 9.6, 9.8, 10.0, 10.2, 10.4, 10.6, 10.9, 11.1, 11.3],
                            positiveOne: [3.7, 4.8, 5.8, 6.6, 7.3, 7.8, 8.2, 8.6, 9.0, 9.3, 9.6, 9.9, 10.1, 10.4, 10.6, 10.9, 11.1, 11.4, 11.6, 11.8, 12.1, 12.3, 12.5, 12.8],
                            positiveTwo: [4.2, 5.5, 6.6, 7.5, 8.2, 8.8, 9.3, 9.8, 10.2, 10.5, 10.9, 11.2, 11.5, 11.8, 12.1, 12.4, 12.6, 12.9, 13.2, 13.5, 13.7, 14.0, 14.3, 14.6],
                            positiveThree: [4.8, 6.2, 7.5, 8.5, 9.3, 10.0, 10.6, 11.1, 11.6, 12.0, 12.4, 12.8, 13.1, 13.5, 13.8, 14.1, 14.5, 14.8, 15.1, 15.4, 15.7, 16.0, 16.4, 16.7],
                            xLabels: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]
                        },
                        five: {
                            negativeThree: [7.9, 8.1, 8.2, 8.4, 8.5, 8.6, 8.8, 8.9, 9.0, 9.1, 9.3, 9.4, 9.5, 9.6, 9.7, 9.8, 9.9, 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.8, 10.9, 11.0, 11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7, 11.8, 11.9, 12.0, 12.1],
                            negativeTwo: [8.9, 9.0, 9.2, 9.4, 9.5, 9.7, 9.8, 10.0, 10.1, 10.3, 10.4, 10.5, 10.7, 10.8, 10.9, 11.1, 11.2, 11.3, 11.5, 11.6, 11.7, 11.8, 12.0, 12.1, 12.2, 12.3, 12.4, 12.6, 12.7, 12.8, 12.9, 13.0, 13.2, 13.3, 13.4, 13.5, 13.6, 13.7],
                            negativeOne: [10.0, 10.2, 10.3, 10.5, 10.7, 10.9, 11.1, 11.2, 11.4, 11.6, 11.7, 11.9, 12.0, 12.2, 12.4, 12.5, 12.7, 12.8, 13.0, 13.1, 13.3, 13.4, 13.6, 13.7, 13.9, 14.0, 14.2, 14.3, 14.5, 14.6, 14.8, 14.9, 15.1, 15.2, 15.3, 15.5, 15.6, 15.8],
                            zero: [11.3, 11.5, 11.7, 11.9, 12.1, 12.3, 12.5, 12.7, 12.9, 13.1, 13.3, 13.5, 13.7, 13.9, 14.0, 14.2, 14.4, 14.6, 14.8, 15.0, 15.2, 15.3, 15.5, 15.7, 15.9, 16.1, 16.3, 16.4, 16.6, 16.8, 17.0, 17.2, 17.3, 17.5, 17.7, 17.9, 18.0, 18.2],
                            positiveOne: [12.8, 13.0, 13.3, 13.5, 13.7, 14.0, 14.2, 14.4, 14.7, 14.9, 15.1, 15.4, 15.6, 15.8, 16.0, 16.3, 16.5, 16.7, 16.9, 17.2, 17.4, 17.6, 17.8, 18.1, 18.3, 18.5, 18.8, 19.0, 19.2, 19.4, 19.7, 19.9, 20.1, 20.3, 20.6, 20.8, 21.0, 21.2],
                            positiveTwo: [14.6, 14.8, 15.1, 15.4, 15.7, 16.0, 16.2, 16.5, 16.8, 17.1, 17.3, 17.6, 17.9, 18.1, 18.4, 18.7, 19.0, 19.2, 19.5, 19.8, 20.1, 20.4, 20.7, 20.9, 21.2, 21.5, 21.8, 22.1, 22.4, 22.6, 22.9, 23.2, 23.5, 23.8, 24.1, 24.4, 24.6, 24.9],
                            positiveThree: [16.7, 17.0, 17.3, 17.7, 18.0, 18.3, 18.7, 19.0, 19.3, 19.6, 20.0, 20.3, 20.6, 20.9, 21.3, 21.6, 22.0, 22.3, 22.7, 23.0, 23.4, 23.7, 24.1, 24.5, 24.8, 25.2, 25.5, 25.9, 26.3, 26.6, 27.0, 27.4, 27.7, 28.1, 28.5, 28.8, 29.2, 29.5],
                            xLabels: [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60]
                        }
                    }
                };
                var weightSizeData = {
                    boy: {
                        two: {
                            negativeThree: [1.9, 1.9, 2.0, 2.1, 2.1, 2.2, 2.3, 2.3, 2.4, 2.5, 2.6, 2.7, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6.0, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6, 6.6, 6.7, 6.8, 6.9, 7.0, 7.1, 7.2, 7.2, 7.3, 7.4, 7.5, 7.6, 7.6, 7.7, 7.8, 7.9, 7.9, 8.0, 8.1, 8.2, 8.2, 8.3, 8.4, 8.5, 8.5, 8.6, 8.7, 8.8, 8.9, 9.0, 9.1, 9.2, 9.3, 9.4, 9.5, 9.6, 9.7, 9.8, 9.9, 10.0, 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.7, 10.8, 10.9, 11.0, 11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7, 11.8, 11.9, 12.0, 12.1, 12.2, 12.3, 12.4, 12.5, 12.6, 12.7, 12.8, 12.9, 13.0, 13.2, 13.3, 13.4, 13.5, 13.6, 13.7, 13.8, 14.0, 14.1, 14.2],
                            negativeTwo: [2.0, 2.1, 2.2, 2.3, 2.3, 2.4, 2.5, 2.6, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 4.0, 4.1, 4.2, 4.3, 4.5, 4.6, 4.7, 4.8, 5.0, 5.1, 5.2, 5.3, 5.4, 5.6, 5.7, 5.8, 5.9, 6.0, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6, 6.7, 6.8, 6.9, 7.0, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.6, 7.7, 7.8, 7.9, 8.0, 8.1, 8.2, 8.3, 8.3, 8.4, 8.5, 8.6, 8.7, 8.7, 8.8, 8.9, 9.0, 9.1, 9.1, 9.2, 9.3, 9.4, 9.5, 9.6, 9.7, 9.8, 9.9, 10.0, 10.1, 10.2, 10.4, 10.5, 10.6, 10.7, 10.8, 10.9, 11.0, 11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7, 11.8, 11.9, 12.0, 12.1, 12.2, 12.3, 12.4, 12.5, 12.6, 12.7, 12.8, 12.9, 13.0, 13.2, 13.3, 13.4, 13.5, 13.6, 13.7, 13.9, 14.0, 14.1, 14.2, 14.4, 14.5, 14.6, 14.7, 14.9, 15.0, 15.1, 15.3, 15.4],
                            negativeOne: [2.2, 2.3, 2.4, 2.5, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.0, 3.1, 3.2, 3.3, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.2, 4.3, 4.4, 4.6, 4.7, 4.9, 5.0, 5.1, 5.3, 5.4, 5.5, 5.6, 5.8, 5.9, 6.0, 6.1, 6.2, 6.4, 6.5, 6.6, 6.7, 6.8, 6.9, 7.0, 7.1, 7.2, 7.3, 7.5, 7.6, 7.7, 7.8, 7.9, 8.0, 8.1, 8.2, 8.3, 8.4, 8.5, 8.6, 8.7, 8.8, 8.8, 8.9, 9.0, 9.1, 9.2, 9.3, 9.4, 9.5, 9.5, 9.6, 9.7, 9.8, 9.9, 10.0, 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.8, 11.0, 11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.8, 11.9, 12.0, 12.1, 12.2, 12.3, 12.4, 12.5, 12.6, 12.7, 12.8, 12.9, 13.1, 13.2, 13.3, 13.4, 13.5, 13.6, 13.7, 13.9, 14.0, 14.1, 14.2, 14.4, 14.5, 14.6, 14.8, 14.9, 15.0, 15.2, 15.3, 15.4, 15.6, 15.7, 15.9, 16.0, 16.2, 16.3, 16.5, 16.6, 16.8],
                            zero: [2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.8, 3.9, 4.0, 4.1, 4.3, 4.4, 4.5, 4.7, 4.8, 5.0, 5.1, 5.3, 5.4, 5.6, 5.7, 5.9, 6.0, 6.1, 6.3, 6.4, 6.5, 6.7, 6.8, 6.9, 7.0, 7.1, 7.3, 7.4, 7.5, 7.6, 7.7, 7.9, 8.0, 8.1, 8.2, 8.3, 8.4, 8.5, 8.6, 8.8, 8.9, 9.0, 9.1, 9.2, 9.3, 9.4, 9.5, 9.6, 9.7, 9.8, 9.9, 10.0, 10.1, 10.2, 10.3, 10.4, 10.4, 10.5, 10.6, 10.7, 10.8, 10.9, 11.0, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7, 11.9, 12.0, 12.1, 12.2, 12.4, 12.5, 12.6, 12.7, 12.8, 13.0, 13.1, 13.2, 13.3, 13.4, 13.5, 13.7, 13.8, 13.9, 14.0, 14.1, 14.3, 14.4, 14.5, 14.6, 14.8, 14.9, 15.0, 15.2, 15.3, 15.4, 15.6, 15.7, 15.9, 16.0, 16.2, 16.3, 16.5, 16.6, 16.8, 16.9, 17.1, 17.3, 17.4, 17.6, 17.8, 17.9, 18.1, 18.3],
                            positiveOne: [2.7, 2.8, 2.9, 3.0, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.8, 3.9, 4.0, 4.1, 4.2, 4.4, 4.5, 4.7, 4.8, 5.0, 5.1, 5.3, 5.4, 5.6, 5.7, 5.9, 6.1, 6.2, 6.4, 6.5, 6.7, 6.8, 7.0, 7.1, 7.2, 7.4, 7.5, 7.6, 7.8, 7.9, 8.0, 8.2, 8.3, 8.4, 8.5, 8.7, 8.8, 8.9, 9.0, 9.2, 9.3, 9.4, 9.5, 9.6, 9.8, 9.9, 10.0, 10.1, 10.2, 10.3, 10.4, 10.6, 10.7, 10.8, 10.9, 11.0, 11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7, 11.8, 11.9, 12.0, 12.1, 12.2, 12.4, 12.5, 12.6, 12.8, 12.9, 13.0, 13.2, 13.3, 13.4, 13.5, 13.7, 13.8, 13.9, 14.1, 14.2, 14.3, 14.4, 14.6, 14.7, 14.8, 14.9, 15.1, 15.2, 15.3, 15.5, 15.6, 15.7, 15.9, 16.0, 16.2, 16.3, 16.5, 16.6, 16.8, 16.9, 17.1, 17.3, 17.4, 17.6, 17.8, 17.9, 18.1, 18.3, 18.5, 18.6, 18.8, 19.0, 19.2, 19.4, 19.6, 19.8, 20.0],
                            positiveTwo: [3.0, 3.1, 3.1, 3.2, 3.3, 3.4, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.4, 4.5, 4.6, 4.8, 4.9, 5.1, 5.3, 5.4, 5.6, 5.8, 5.9, 6.1, 6.3, 6.4, 6.6, 6.8, 7.0, 7.1, 7.3, 7.4, 7.6, 7.7, 7.9, 8.0, 8.2, 8.3, 8.5, 8.6, 8.7, 8.9, 9.0, 9.2, 9.3, 9.4, 9.6, 9.7, 9.8, 10.0, 10.1, 10.2, 10.4, 10.5, 10.6, 10.8, 10.9, 11.0, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7, 11.9, 12.0, 12.1, 12.2, 12.3, 12.4, 12.5, 12.6, 12.7, 12.8, 13.0, 13.1, 13.2, 13.3, 13.5, 13.6, 13.7, 13.9, 14.0, 14.2, 14.3, 14.5, 14.6, 14.7, 14.9, 15.0, 15.1, 15.3, 15.4, 15.6, 15.7, 15.8, 16.0, 16.1, 16.3, 16.4, 16.5, 16.7, 16.8, 17.0, 17.1, 17.3, 17.5, 17.6, 17.8, 18.0, 18.1, 18.3, 18.5, 18.7, 18.8, 19.0, 19.2, 19.4, 19.6, 19.8, 20.0, 20.2, 20.4, 20.6, 20.8, 21.0, 21.2, 21.4, 21.7, 21.9],
                            positiveThree: [3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.2, 4.3, 4.4, 4.5, 4.7, 4.8, 5.0, 5.1, 5.3, 5.4, 5.6, 5.8, 6.0, 6.1, 6.3, 6.5, 6.7, 6.9, 7.1, 7.2, 7.4, 7.6, 7.8, 8.0, 8.1, 8.3, 8.5, 8.6, 8.8, 8.9, 9.1, 9.3, 9.4, 9.6, 9.7, 9.9, 10.0, 10.2, 10.3, 10.5, 10.6, 10.8, 10.9, 11.1, 11.2, 11.3, 11.5, 11.6, 11.8, 11.9, 12.1, 12.2, 12.3, 12.5, 12.6, 12.7, 12.8, 13.0, 13.1, 13.2, 13.3, 13.4, 13.6, 13.7, 13.8, 13.9, 14.0, 14.2, 14.3, 14.4, 14.6, 14.7, 14.9, 15.0, 15.2, 15.3, 15.5, 15.6, 15.8, 15.9, 16.1, 16.2, 16.4, 16.5, 16.7, 16.8, 17.0, 17.1, 17.3, 17.4, 17.6, 17.7, 17.9, 18.0, 18.2, 18.4, 18.5, 18.7, 18.9, 19.1, 19.2, 19.4, 19.6, 19.8, 20.0, 20.2, 20.4, 20.6, 20.8, 21.0, 21.2, 21.5, 21.7, 21.9, 22.1, 22.4, 22.6, 22.8, 23.1, 23.3, 23.6, 23.8, 24.1],
                            xLabels: [45.0, 45.5, 46.0, 46.5, 47.0, 47.5, 48.0, 48.5, 49.0, 49.5, 50.0, 50.5, 51.0, 51.5, 52.0, 52.5, 53.0, 53.5, 54.0, 54.5, 55.0, 55.5, 56.0, 56.5, 57.0, 57.5, 58.0, 58.5, 59.0, 59.5, 60.0, 60.5, 61.0, 61.5, 62.0, 62.5, 63.0, 63.5, 64.0, 64.5, 65.0, 65.5, 66.0, 66.5, 67.0, 67.5, 68.0, 68.5, 69.0, 69.5, 70.0, 70.5, 71.0, 71.5, 72.0, 72.5, 73.0, 73.5, 74.0, 74.5, 75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 78.0, 78.5, 79.0, 79.5, 80.0, 80.5, 81.0, 81.5, 82.0, 82.5, 83.0, 83.5, 84.0, 84.5, 85.0, 85.5, 86.0, 86.5, 87.0, 87.5, 88.0, 88.5, 89.0, 89.5, 90.0, 90.5, 91.0, 91.5, 92.0, 92.5, 93.0, 93.5, 94.0, 94.5, 95.0, 95.5, 96.0, 96.5, 97.0, 97.5, 98.0, 98.5, 99.0, 99.5, 100.0, 100.5, 101.0, 101.5, 102.0, 102.5, 103.0, 103.5, 104.0, 104.5, 105.0, 105.5, 106.0, 106.5, 107.0, 107.5, 108.0, 108.5, 109.0, 109.5, 110.0]
                        },
                        five: {
                            negativeThree: [5.9, 6.0, 6.1, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6, 6.7, 6.8, 6.9, 6.9, 7.0, 7.1, 7.2, 7.3, 7.4, 7.4, 7.5, 7.6, 7.7, 7.7, 7.8, 7.9, 8.0, 8.0, 8.1, 8.2, 8.3, 8.3, 8.4, 8.5, 8.6, 8.7, 8.7, 8.8, 8.9, 9.0, 9.1, 9.2, 9.3, 9.4, 9.5, 9.6, 9.7, 9.8, 9.9, 10.0, 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.8, 10.9, 11.0, 11.1, 11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7, 11.8, 11.9, 12.0, 12.1, 12.2, 12.3, 12.4, 12.5, 12.6, 12.8, 12.9, 13.0, 13.1, 13.2, 13.3, 13.4, 13.5, 13.7, 13.8, 13.9, 14.0, 14.1, 14.3, 14.4, 14.5, 14.6, 14.8, 14.9, 15.0, 15.2, 15.3, 15.4, 15.6, 15.7, 15.8, 16.0, 16.1, 16.2, 16.4, 16.5, 16.7, 16.8, 16.9, 17.1],
                            negativeTwo: [6.3, 6.4, 6.5, 6.6, 6.7, 6.8, 6.9, 7.0, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 7.9, 8.0, 8.1, 8.2, 8.3, 8.4, 8.5, 8.5, 8.6, 8.7, 8.8, 8.8, 8.9, 9.0, 9.1, 9.2, 9.3, 9.3, 9.4, 9.5, 9.6, 9.7, 9.9, 10.0, 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.8, 10.9, 11.0, 11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7, 11.8, 11.9, 12.0, 12.1, 12.2, 12.3, 12.4, 12.5, 12.6, 12.8, 12.9, 13.0, 13.1, 13.2, 13.3, 13.4, 13.6, 13.7, 13.8, 13.9, 14.0, 14.2, 14.3, 14.4, 14.5, 14.7, 14.8, 14.9, 15.1, 15.2, 15.3, 15.5, 15.6, 15.8, 15.9, 16.0, 16.2, 16.3, 16.5, 16.6, 16.8, 16.9, 17.1, 17.2, 17.4, 17.5, 17.7, 17.9, 18.0, 18.2, 18.3, 18.5, 18.6],
                            negativeOne: [6.9, 7.0, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 8.0, 8.1, 8.2, 8.3, 8.4, 8.5, 8.6, 8.7, 8.8, 8.9, 9.0, 9.1, 9.2, 9.2, 9.3, 9.4, 9.5, 9.6, 9.7, 9.7, 9.8, 9.9, 10.0, 10.1, 10.2, 10.3, 10.4, 10.5, 10.7, 10.8, 10.9, 11.0, 11.1, 11.2, 11.3, 11.5, 11.6, 11.7, 11.8, 11.9, 12.0, 12.1, 12.2, 12.3, 12.4, 12.6, 12.7, 12.8, 12.9, 13.0, 13.1, 13.2, 13.3, 13.4, 13.6, 13.7, 13.8, 13.9, 14.0, 14.2, 14.3, 14.4, 14.5, 14.7, 14.8, 14.9, 15.1, 15.2, 15.4, 15.5, 15.6, 15.8, 15.9, 16.1, 16.2, 16.4, 16.5, 16.7, 16.8, 17.0, 17.1, 17.3, 17.5, 17.6, 17.8, 18.0, 18.1, 18.3, 18.5, 18.6, 18.8, 19.0, 19.2, 19.3, 19.5, 19.7, 19.9, 20.0, 20.2, 20.4],
                            zero: [7.4, 7.6, 7.7, 7.8, 7.9, 8.0, 8.1, 8.2, 8.4, 8.5, 8.6, 8.7, 8.8, 8.9, 9.0, 9.1, 9.2, 9.3, 9.4, 9.5, 9.6, 9.7, 9.8, 9.9, 10.0, 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.8, 10.9, 11.0, 11.1, 11.2, 11.3, 11.4, 11.5, 11.7, 11.8, 11.9, 12.0, 12.2, 12.3, 12.4, 12.5, 12.6, 12.8, 12.9, 13.0, 13.1, 13.2, 13.4, 13.5, 13.6, 13.7, 13.8, 13.9, 14.1, 14.2, 14.3, 14.4, 14.6, 14.7, 14.8, 14.9, 15.1, 15.2, 15.4, 15.5, 15.6, 15.8, 15.9, 16.1, 16.2, 16.4, 16.5, 16.7, 16.8, 17.0, 17.2, 17.3, 17.5, 17.7, 17.8, 18.0, 18.2, 18.3, 18.5, 18.7, 18.9, 19.1, 19.2, 19.4, 19.6, 19.8, 20.0, 20.2, 20.4, 20.6, 20.8, 21.0, 21.2, 21.4, 21.6, 21.8, 22.0, 22.2, 22.4],
                            positiveOne: [8.1, 8.2, 8.3, 8.5, 8.6, 8.7, 8.8, 9.0, 9.1, 9.2, 9.3, 9.5, 9.6, 9.7, 9.8, 9.9, 10.0, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.8, 10.9, 11.0, 11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7, 11.8, 11.9, 12.1, 12.2, 12.3, 12.4, 12.5, 12.7, 12.8, 12.9, 13.1, 13.2, 13.3, 13.5, 13.6, 13.7, 13.9, 14.0, 14.1, 14.2, 14.4, 14.5, 14.6, 14.7, 14.9, 15.0, 15.1, 15.3, 15.4, 15.5, 15.7, 15.8, 15.9, 16.1, 16.2, 16.4, 16.5, 16.7, 16.9, 17.0, 17.2, 17.3, 17.5, 17.7, 17.8, 18.0, 18.2, 18.4, 18.5, 18.7, 18.9, 19.1, 19.3, 19.5, 19.7, 19.8, 20.0, 20.2, 20.4, 20.7, 20.9, 21.1, 21.3, 21.5, 21.7, 21.9, 22.1, 22.4, 22.6, 22.8, 23.0, 23.3, 23.5, 23.7, 23.9, 24.1, 24.4, 24.6],
                            positiveTwo: [8.8, 8.9, 9.1, 9.2, 9.4, 9.5, 9.6, 9.8, 9.9, 10.0, 10.2, 10.3, 10.4, 10.6, 10.7, 10.8, 11.0, 11.1, 11.2, 11.3, 11.4, 11.6, 11.7, 11.8, 11.9, 12.0, 12.1, 12.2, 12.3, 12.4, 12.6, 12.7, 12.8, 12.9, 13.0, 13.1, 13.3, 13.4, 13.5, 13.7, 13.8, 13.9, 14.1, 14.2, 14.4, 14.5, 14.7, 14.8, 14.9, 15.1, 15.2, 15.3, 15.5, 15.6, 15.8, 15.9, 16.0, 16.2, 16.3, 16.5, 16.6, 16.7, 16.9, 17.0, 17.2, 17.4, 17.5, 17.7, 17.9, 18.0, 18.2, 18.4, 18.5, 18.7, 18.9, 19.1, 19.3, 19.5, 19.7, 19.9, 20.1, 20.3, 20.5, 20.7, 20.9, 21.1, 21.3, 21.5, 21.8, 22.0, 22.2, 22.4, 22.7, 22.9, 23.1, 23.4, 23.6, 23.9, 24.1, 24.4, 24.6, 24.9, 25.1, 25.4, 25.6, 25.9, 26.1, 26.4, 26.6, 26.9, 27.2],
                            positiveThree: [9.6, 9.8, 9.9, 10.1, 10.2, 10.4, 10.5, 10.7, 10.8, 11.0, 11.1, 11.3, 11.4, 11.6, 11.7, 11.8, 12.0, 12.1, 12.2, 12.4, 12.5, 12.6, 12.8, 12.9, 13.0, 13.1, 13.3, 13.4, 13.5, 13.6, 13.7, 13.8, 14.0, 14.1, 14.2, 14.4, 14.5, 14.6, 14.8, 14.9, 15.1, 15.2, 15.4, 15.5, 15.7, 15.8, 16.0, 16.1, 16.3, 16.4, 16.6, 16.7, 16.9, 17.0, 17.2, 17.3, 17.5, 17.6, 17.8, 17.9, 18.1, 18.3, 18.4, 18.6, 18.8, 18.9, 19.1, 19.3, 19.5, 19.7, 19.9, 20.1, 20.3, 20.5, 20.7, 20.9, 21.1, 21.3, 21.6, 21.8, 22.0, 22.2, 22.5, 22.7, 22.9, 23.2, 23.4, 23.7, 23.9, 24.2, 24.4, 24.7, 25.0, 25.2, 25.5, 25.8, 26.0, 26.3, 26.6, 26.9, 27.2, 27.5, 27.8, 28.0, 28.3, 28.6, 28.9, 29.2, 29.5, 29.8, 30.1],
                            xLabels: [65.0, 65.5, 66.0, 66.5, 67.0, 67.5, 68.0, 68.5, 69.0, 69.5, 70.0, 70.5, 71.0, 71.5, 72.0, 72.5, 73.0, 73.5, 74.0, 74.5, 75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 78.0, 78.5, 79.0, 79.5, 80.0, 80.5, 81.0, 81.5, 82.0, 82.5, 83.0, 83.5, 84.0, 84.5, 85.0, 85.5, 86.0, 86.5, 87.0, 87.5, 88.0, 88.5, 89.0, 89.5, 90.0, 90.5, 91.0, 91.5, 92.0, 92.5, 93.0, 93.5, 94.0, 94.5, 95.0, 95.5, 96.0, 96.5, 97.0, 97.5, 98.0, 98.5, 99.0, 99.5, 100.0, 100.5, 101.0, 101.5, 102.0, 102.5, 103.0, 103.5, 104.0, 104.5, 105.0, 105.5, 106.0, 106.5, 107.0, 107.5, 108.0, 108.5, 109.0, 109.5, 110.0, 110.5, 111.0, 111.5, 112.0, 112.5, 113.0, 113.5, 114.0, 114.5, 115.0, 115.5, 116.0, 116.5, 117.0, 117.5, 118.0, 118.5, 119.0, 119.5, 120.0]
                        }
                    },
                    girl: {
                        two: {
                            negativeThree: [1.9, 2.0, 2.0, 2.1, 2.2, 2.2, 2.3, 2.4, 2.4, 2.5, 2.6, 2.7, 2.8, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 5.4, 5.5, 5.5, 5.6, 5.7, 5.8, 5.9, 6.0, 6.1, 6.1, 6.2, 6.3, 6.4, 6.5, 6.5, 6.6, 6.7, 6.8, 6.9, 6.9, 7.0, 7.1, 7.1, 7.2, 7.3, 7.4, 7.4, 7.5, 7.6, 7.7, 7.7, 7.8, 7.9, 8.0, 8.1, 8.1, 8.2, 8.3, 8.4, 8.5, 8.6, 8.7, 8.8, 8.9, 9.0, 9.1, 9.2, 9.3, 9.4, 9.5, 9.6, 9.7, 9.8, 9.9, 10.0, 10.1, 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.8, 10.9, 11.0, 11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7, 11.8, 11.9, 12.0, 12.1, 12.3, 12.4, 12.5, 12.6, 12.7, 12.8, 13.0, 13.1, 13.2, 13.3, 13.5, 13.6, 13.7, 13.9, 14.0],
                            negativeTwo: [2.1, 2.1, 2.2, 2.3, 2.4, 2.4, 2.5, 2.6, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6.0, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6, 6.7, 6.8, 6.9, 6.9, 7.0, 7.1, 7.2, 7.3, 7.4, 7.4, 7.5, 7.6, 7.7, 7.8, 7.8, 7.9, 8.0, 8.1, 8.2, 8.2, 8.3, 8.4, 8.5, 8.6, 8.7, 8.8, 8.8, 8.9, 9.0, 9.1, 9.2, 9.3, 9.4, 9.5, 9.7, 9.8, 9.9, 10.0, 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.8, 10.9, 11.0, 11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7, 11.8, 12.0, 12.1, 12.2, 12.3, 12.4, 12.5, 12.6, 12.7, 12.8, 13.0, 13.1, 13.2, 13.3, 13.5, 13.6, 13.7, 13.8, 14.0, 14.1, 14.3, 14.4, 14.5, 14.7, 14.8, 15.0, 15.1, 15.3],
                            negativeOne: [2.3, 2.3, 2.4, 2.5, 2.6, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.2, 4.3, 4.4, 4.5, 4.6, 4.8, 4.9, 5.0, 5.1, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6.0, 6.2, 6.3, 6.4, 6.5, 6.6, 6.7, 6.8, 6.9, 7.0, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.7, 7.8, 7.9, 8.0, 8.1, 8.2, 8.3, 8.4, 8.5, 8.5, 8.6, 8.7, 8.8, 8.9, 9.0, 9.1, 9.1, 9.2, 9.3, 9.4, 9.5, 9.6, 9.7, 9.8, 9.9, 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.9, 11.0, 11.1, 11.2, 11.3, 11.4, 11.5, 11.7, 11.8, 11.9, 12.0, 12.1, 12.2, 12.3, 12.4, 12.6, 12.7, 12.8, 12.9, 13.0, 13.1, 13.3, 13.4, 13.5, 13.6, 13.7, 13.9, 14.0, 14.1, 14.3, 14.4, 14.5, 14.7, 14.8, 15.0, 15.1, 15.3, 15.4, 15.6, 15.7, 15.9, 16.0, 16.2, 16.4, 16.5, 16.7],
                            zero: [2.5, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.2, 4.3, 4.4, 4.5, 4.7, 4.8, 5.0, 5.1, 5.2, 5.4, 5.5, 5.6, 5.7, 5.9, 6.0, 6.1, 6.3, 6.4, 6.5, 6.6, 6.7, 6.9, 7.0, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.9, 8.0, 8.1, 8.2, 8.3, 8.4, 8.5, 8.6, 8.7, 8.8, 8.9, 9.0, 9.1, 9.1, 9.2, 9.3, 9.4, 9.5, 9.6, 9.7, 9.8, 9.9, 10.0, 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.9, 11.0, 11.1, 11.2, 11.3, 11.5, 11.6, 11.7, 11.8, 12.0, 12.1, 12.2, 12.3, 12.5, 12.6, 12.7, 12.8, 13.0, 13.1, 13.2, 13.3, 13.5, 13.6, 13.7, 13.8, 14.0, 14.1, 14.2, 14.4, 14.5, 14.6, 14.8, 14.9, 15.0, 15.2, 15.3, 15.5, 15.6, 15.8, 15.9, 16.1, 16.2, 16.4, 16.5, 16.7, 16.9, 17.1, 17.2, 17.4, 17.6, 17.8, 18.0, 18.1, 18.3],
                            positiveOne: [2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.2, 4.3, 4.4, 4.6, 4.7, 4.8, 5.0, 5.1, 5.3, 5.4, 5.6, 5.7, 5.9, 6.0, 6.2, 6.3, 6.4, 6.6, 6.7, 6.9, 7.0, 7.1, 7.3, 7.4, 7.5, 7.6, 7.8, 7.9, 8.0, 8.1, 8.3, 8.4, 8.5, 8.6, 8.7, 8.8, 9.0, 9.1, 9.2, 9.3, 9.4, 9.5, 9.6, 9.7, 9.8, 9.9, 10.0, 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.8, 10.9, 11.0, 11.2, 11.3, 11.4, 11.5, 11.6, 11.8, 11.9, 12.0, 12.1, 12.3, 12.4, 12.6, 12.7, 12.8, 13.0, 13.1, 13.2, 13.4, 13.5, 13.7, 13.8, 13.9, 14.1, 14.2, 14.3, 14.5, 14.6, 14.7, 14.9, 15.0, 15.2, 15.3, 15.4, 15.6, 15.7, 15.9, 16.0, 16.2, 16.3, 16.5, 16.6, 16.8, 17.0, 17.1, 17.3, 17.5, 17.6, 17.8, 18.0, 18.2, 18.4, 18.5, 18.7, 18.9, 19.1, 19.3, 19.5, 19.7, 20.0, 20.2],
                            positiveTwo: [3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.2, 4.3, 4.4, 4.6, 4.7, 4.9, 5.0, 5.2, 5.3, 5.5, 5.7, 5.8, 6.0, 6.1, 6.3, 6.5, 6.6, 6.8, 6.9, 7.1, 7.3, 7.4, 7.6, 7.7, 7.8, 8.0, 8.1, 8.3, 8.4, 8.6, 8.7, 8.8, 9.0, 9.1, 9.2, 9.4, 9.5, 9.6, 9.7, 9.9, 10.0, 10.1, 10.2, 10.3, 10.5, 10.6, 10.7, 10.8, 10.9, 11.0, 11.1, 11.2, 11.4, 11.5, 11.6, 11.7, 11.8, 11.9, 12.0, 12.1, 12.3, 12.4, 12.5, 12.6, 12.8, 12.9, 13.1, 13.2, 13.3, 13.5, 13.6, 13.8, 13.9, 14.1, 14.2, 14.4, 14.5, 14.7, 14.8, 15.0, 15.1, 15.3, 15.5, 15.6, 15.8, 15.9, 16.1, 16.2, 16.4, 16.5, 16.7, 16.8, 17.0, 17.1, 17.3, 17.5, 17.6, 17.8, 18.0, 18.1, 18.3, 18.5, 18.7, 18.9, 19.0, 19.2, 19.4, 19.6, 19.8, 20.0, 20.2, 20.5, 20.7, 20.9, 21.1, 21.3, 21.6, 21.8, 22.0, 22.3],
                            positiveThree: [3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 4.0, 4.1, 4.2, 4.3, 4.5, 4.6, 4.8, 4.9, 5.1, 5.2, 5.4, 5.5, 5.7, 5.9, 6.1, 6.3, 6.4, 6.6, 6.8, 7.0, 7.1, 7.3, 7.5, 7.7, 7.8, 8.0, 8.2, 8.4, 8.5, 8.7, 8.8, 9.0, 9.1, 9.3, 9.5, 9.6, 9.8, 9.9, 10.0, 10.2, 10.3, 10.5, 10.6, 10.7, 10.9, 11.0, 11.1, 11.3, 11.4, 11.5, 11.7, 11.8, 11.9, 12.0, 12.2, 12.3, 12.4, 12.5, 12.6, 12.8, 12.9, 13.0, 13.1, 13.3, 13.4, 13.5, 13.7, 13.8, 13.9, 14.1, 14.2, 14.4, 14.5, 14.7, 14.9, 15.0, 15.2, 15.4, 15.5, 15.7, 15.9, 16.0, 16.2, 16.4, 16.5, 16.7, 16.9, 17.0, 17.2, 17.4, 17.5, 17.7, 17.9, 18.0, 18.2, 18.4, 18.6, 18.7, 18.9, 19.1, 19.3, 19.5, 19.6, 19.8, 20.0, 20.2, 20.4, 20.6, 20.8, 21.0, 21.3, 21.5, 21.7, 21.9, 22.2, 22.4, 22.6, 22.9, 23.1, 23.4, 23.6, 23.9, 24.2, 24.4, 24.7],
                            xLabels: [45.0, 45.5, 46.0, 46.5, 47.0, 47.5, 48.0, 48.5, 49.0, 49.5, 50.0, 50.5, 51.0, 51.5, 52.0, 52.5, 53.0, 53.5, 54.0, 54.5, 55.0, 55.5, 56.0, 56.5, 57.0, 57.5, 58.0, 58.5, 59.0, 59.5, 60.0, 60.5, 61.0, 61.5, 62.0, 62.5, 63.0, 63.5, 64.0, 64.5, 65.0, 65.5, 66.0, 66.5, 67.0, 67.5, 68.0, 68.5, 69.0, 69.5, 70.0, 70.5, 71.0, 71.5, 72.0, 72.5, 73.0, 73.5, 74.0, 74.5, 75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 78.0, 78.5, 79.0, 79.5, 80.0, 80.5, 81.0, 81.5, 82.0, 82.5, 83.0, 83.5, 84.0, 84.5, 85.0, 85.5, 86.0, 86.5, 87.0, 87.5, 88.0, 88.5, 89.0, 89.5, 90.0, 90.5, 91.0, 91.5, 92.0, 92.5, 93.0, 93.5, 94.0, 94.5, 95.0, 95.5, 96.0, 96.5, 97.0, 97.5, 98.0, 98.5, 99.0, 99.5, 100.0, 100.5, 101.0, 101.5, 102.0, 102.5, 103.0, 103.5, 104.0, 104.5, 105.0, 105.5, 106.0, 106.5, 107.0, 107.5, 108.0, 108.5, 109.0, 109.5, 110.0]
                        },
                        five: {
                            negativeThree: [5.6, 5.7, 5.8, 5.8, 5.9, 6.0, 6.1, 6.2, 6.3, 6.3, 6.4, 6.5, 6.6, 6.7, 6.7, 6.8, 6.9, 7.0, 7.0, 7.1, 7.2, 7.2, 7.3, 7.4, 7.5, 7.5, 7.6, 7.7, 7.8, 7.8, 7.9, 8.0, 8.1, 8.2, 8.3, 8.4, 8.5, 8.5, 8.6, 8.7, 8.8, 8.9, 9.0, 9.1, 9.2, 9.3, 9.4, 9.5, 9.6, 9.7, 9.8, 9.9, 10.0, 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.8, 10.8, 10.9, 11.0, 11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7, 11.9, 12.0, 12.1, 12.2, 12.3, 12.4, 12.5, 12.6, 12.8, 12.9, 13.0, 13.1, 13.3, 13.4, 13.5, 13.7, 13.8, 13.9, 14.1, 14.2, 14.4, 14.5, 14.7, 14.8, 15.0, 15.1, 15.3, 15.4, 15.6, 15.7, 15.9, 16.0, 16.2, 16.3, 16.5, 16.6, 16.8, 16.9, 17.1, 17.3],
                            negativeTwo: [6.1, 6.2, 6.3, 6.4, 6.4, 6.5, 6.6, 6.7, 6.8, 6.9, 7.0, 7.1, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.6, 7.7, 7.8, 7.9, 8.0, 8.0, 8.1, 8.2, 8.3, 8.4, 8.4, 8.5, 8.6, 8.7, 8.8, 8.9, 9.0, 9.1, 9.2, 9.3, 9.4, 9.5, 9.6, 9.7, 9.8, 9.9, 10.0, 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.9, 11.0, 11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7, 11.8, 11.9, 12.0, 12.1, 12.2, 12.3, 12.4, 12.5, 12.7, 12.8, 12.9, 13.0, 13.1, 13.3, 13.4, 13.5, 13.6, 13.8, 13.9, 14.0, 14.2, 14.3, 14.5, 14.6, 14.7, 14.9, 15.0, 15.2, 15.4, 15.5, 15.7, 15.8, 16.0, 16.2, 16.3, 16.5, 16.7, 16.8, 17.0, 17.2, 17.3, 17.5, 17.7, 17.8, 18.0, 18.2, 18.4, 18.5, 18.7, 18.9],
                            negativeOne: [6.6, 6.7, 6.8, 6.9, 7.0, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 8.0, 8.1, 8.1, 8.2, 8.3, 8.4, 8.5, 8.6, 8.7, 8.7, 8.8, 8.9, 9.0, 9.1, 9.2, 9.3, 9.4, 9.5, 9.6, 9.7, 9.8, 9.9, 10.0, 10.1, 10.2, 10.3, 10.4, 10.6, 10.7, 10.8, 10.9, 11.0, 11.1, 11.2, 11.4, 11.5, 11.6, 11.7, 11.8, 11.9, 12.0, 12.1, 12.3, 12.4, 12.5, 12.6, 12.7, 12.8, 12.9, 13.1, 13.2, 13.3, 13.4, 13.5, 13.7, 13.8, 13.9, 14.1, 14.2, 14.3, 14.5, 14.6, 14.7, 14.9, 15.0, 15.2, 15.3, 15.5, 15.6, 15.8, 15.9, 16.1, 16.3, 16.4, 16.6, 16.8, 17.0, 17.1, 17.3, 17.5, 17.7, 17.9, 18.0, 18.2, 18.4, 18.6, 18.8, 19.0, 19.2, 19.4, 19.6, 19.8, 19.9, 20.1, 20.3, 20.5, 20.7],
                            zero: [7.2, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 8.0, 8.1, 8.2, 8.3, 8.4, 8.5, 8.6, 8.7, 8.8, 8.9, 9.0, 9.1, 9.2, 9.3, 9.4, 9.5, 9.6, 9.6, 9.7, 9.8, 9.9, 10.0, 10.1, 10.2, 10.3, 10.4, 10.6, 10.7, 10.8, 10.9, 11.0, 11.1, 11.3, 11.4, 11.5, 11.6, 11.8, 11.9, 12.0, 12.1, 12.3, 12.4, 12.5, 12.6, 12.8, 12.9, 13.0, 13.1, 13.3, 13.4, 13.5, 13.6, 13.8, 13.9, 14.0, 14.1, 14.3, 14.4, 14.5, 14.7, 14.8, 14.9, 15.1, 15.2, 15.4, 15.5, 15.7, 15.8, 16.0, 16.1, 16.3, 16.4, 16.6, 16.8, 16.9, 17.1, 17.3, 17.5, 17.7, 17.8, 18.0, 18.2, 18.4, 18.6, 18.8, 19.0, 19.2, 19.4, 19.6, 19.8, 20.0, 20.2, 20.5, 20.7, 20.9, 21.1, 21.3, 21.5, 21.7, 22.0, 22.2, 22.4, 22.6, 22.8],
                            positiveOne: [7.9, 8.1, 8.2, 8.3, 8.4, 8.5, 8.7, 8.8, 8.9, 9.0, 9.1, 9.2, 9.3, 9.4, 9.5, 9.7, 9.8, 9.9, 10.0, 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.8, 10.9, 11.0, 11.1, 11.2, 11.3, 11.4, 11.6, 11.7, 11.8, 11.9, 12.1, 12.2, 12.3, 12.5, 12.6, 12.7, 12.9, 13.0, 13.2, 13.3, 13.4, 13.6, 13.7, 13.8, 14.0, 14.1, 14.3, 14.4, 14.5, 14.7, 14.8, 14.9, 15.1, 15.2, 15.4, 15.5, 15.6, 15.8, 15.9, 16.1, 16.2, 16.4, 16.5, 16.7, 16.9, 17.0, 17.2, 17.4, 17.5, 17.7, 17.9, 18.1, 18.2, 18.4, 18.6, 18.8, 19.0, 19.2, 19.4, 19.6, 19.8, 20.0, 20.3, 20.5, 20.7, 20.9, 21.2, 21.4, 21.6, 21.8, 22.1, 22.3, 22.6, 22.8, 23.0, 23.3, 23.5, 23.8, 24.0, 24.2, 24.5, 24.7, 25.0, 25.2],
                            positiveTwo: [8.7, 8.9, 9.0, 9.1, 9.3, 9.4, 9.5, 9.7, 9.8, 9.9, 10.0, 10.1, 10.3, 10.4, 10.5, 10.6, 10.7, 10.8, 11.0, 11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7, 11.8, 12.0, 12.1, 12.2, 12.3, 12.4, 12.6, 12.7, 12.8, 13.0, 13.1, 13.3, 13.4, 13.5, 13.7, 13.8, 14.0, 14.2, 14.3, 14.5, 14.6, 14.8, 14.9, 15.1, 15.2, 15.4, 15.5, 15.7, 15.8, 16.0, 16.1, 16.3, 16.4, 16.6, 16.7, 16.9, 17.0, 17.2, 17.4, 17.5, 17.7, 17.9, 18.0, 18.2, 18.4, 18.6, 18.7, 18.9, 19.1, 19.3, 19.5, 19.7, 19.9, 20.1, 20.3, 20.5, 20.8, 21.0, 21.2, 21.4, 21.7, 21.9, 22.1, 22.4, 22.6, 22.9, 23.1, 23.4, 23.6, 23.9, 24.2, 24.4, 24.7, 25.0, 25.2, 25.5, 25.8, 26.1, 26.3, 26.6, 26.9, 27.2, 27.4, 27.7, 28.0],
                            positiveThree: [9.7, 9.8, 10.0, 10.1, 10.2, 10.4, 10.5, 10.7, 10.8, 10.9, 11.1, 11.2, 11.3, 11.5, 11.6, 11.7, 11.8, 12.0, 12.1, 12.2, 12.3, 12.5, 12.6, 12.7, 12.8, 12.9, 13.1, 13.2, 13.3, 13.4, 13.6, 13.7, 13.9, 14.0, 14.1, 14.3, 14.5, 14.6, 14.8, 14.9, 15.1, 15.3, 15.4, 15.6, 15.8, 15.9, 16.1, 16.3, 16.4, 16.6, 16.8, 16.9, 17.1, 17.3, 17.4, 17.6, 17.8, 17.9, 18.1, 18.3, 18.5, 18.6, 18.8, 19.0, 19.2, 19.3, 19.5, 19.7, 19.9, 20.1, 20.3, 20.5, 20.7, 20.9, 21.1, 21.4, 21.6, 21.8, 22.0, 22.3, 22.5, 22.7, 23.0, 23.2, 23.5, 23.7, 24.0, 24.3, 24.5, 24.8, 25.1, 25.4, 25.7, 26.0, 26.2, 26.5, 26.8, 27.1, 27.4, 27.8, 28.1, 28.4, 28.7, 29.0, 29.3, 29.6, 29.9, 30.3, 30.6, 30.9, 31.2],
                            xLabels: [65.0, 65.5, 66.0, 66.5, 67.0, 67.5, 68.0, 68.5, 69.0, 69.5, 70.0, 70.5, 71.0, 71.5, 72.0, 72.5, 73.0, 73.5, 74.0, 74.5, 75.0, 75.5, 76.0, 76.5, 77.0, 77.5, 78.0, 78.5, 79.0, 79.5, 80.0, 80.5, 81.0, 81.5, 82.0, 82.5, 83.0, 83.5, 84.0, 84.5, 85.0, 85.5, 86.0, 86.5, 87.0, 87.5, 88.0, 88.5, 89.0, 89.5, 90.0, 90.5, 91.0, 91.5, 92.0, 92.5, 93.0, 93.5, 94.0, 94.5, 95.0, 95.5, 96.0, 96.5, 97.0, 97.5, 98.0, 98.5, 99.0, 99.5, 100.0, 100.5, 101.0, 101.5, 102.0, 102.5, 103.0, 103.5, 104.0, 104.5, 105.0, 105.5, 106.0, 106.5, 107.0, 107.5, 108.0, 108.5, 109.0, 109.5, 110.0, 110.5, 111.0, 111.5, 112.0, 112.5, 113.0, 113.5, 114.0, 114.5, 115.0, 115.5, 116.0, 116.5, 117.0, 117.5, 118.0, 118.5, 119.0, 119.5, 120.0]
                        }
                    }
                };
                var imcAgeData = {
                    boy: {
                        two: {
                            negativeThree: [10.2, 11.3, 12.5, 13.1, 13.4, 13.5, 13.6, 13.7, 13.6, 13.6, 13.5, 13.4, 13.4, 13.3, 13.2, 13.1, 13.1, 13.0, 12.9, 12.9, 12.8, 12.8, 12.7, 12.7, 12.7],
                            negativeTwo: [11.1, 12.4, 13.7, 14.3, 14.5, 14.7, 14.7, 14.8, 14.7, 14.7, 14.6, 14.5, 14.4, 14.3, 14.2, 14.1, 14.0, 13.9, 13.9, 13.8, 13.7, 13.7, 13.6, 13.6, 13.6],
                            negativeOne: [12.2, 13.6, 15.0, 15.5, 15.8, 15.9, 16.0, 16.0, 15.9, 15.8, 15.7, 15.6, 15.5, 15.4, 15.3, 15.2, 15.1, 15.0, 14.9, 14.9, 14.8, 14.7, 14.7, 14.6, 14.6],
                            zero: [13.4, 14.9, 16.3, 16.9, 17.2, 17.3, 17.3, 17.3, 17.3, 17.2, 17.0, 16.9, 16.8, 16.7, 16.6, 16.4, 16.3, 16.2, 16.1, 16.1, 16.0, 15.9, 15.8, 15.8, 15.7],
                            positiveOne: [14.8, 16.3, 17.8, 18.4, 18.7, 18.8, 18.8, 18.8, 18.7, 18.6, 18.5, 18.4, 18.2, 18.1, 18.0, 17.8, 17.7, 17.6, 17.5, 17.4, 17.3, 17.2, 17.2, 17.1, 17.0],
                            positiveTwo: [16.3, 17.8, 19.4, 20.0, 20.3, 20.5, 20.5, 20.5, 20.4, 20.3, 20.1, 20.0, 19.8, 19.7, 19.5, 19.4, 19.3, 19.1, 19.0, 18.9, 18.8, 18.7, 18.7, 18.6, 18.5],
                            positiveThree: [18.1, 19.4, 21.1, 21.8, 22.1, 22.3, 22.3, 22.3, 22.2, 22.1, 22.0, 21.8, 21.6, 21.5, 21.3, 21.2, 21.0, 20.9, 20.8, 20.7, 20.6, 20.5, 20.4, 20.3, 20.3],
                            xLabels: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]
                        },
                        five: {
                            negativeThree: [12.9, 12.8, 12.8, 12.7, 12.7, 12.7, 12.6, 12.6, 12.5, 12.5, 12.5, 12.4, 12.4, 12.4, 12.3, 12.3, 12.3, 12.2, 12.2, 12.2, 12.2, 12.2, 12.1, 12.1, 12.1, 12.1, 12.1, 12.1, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0],
                            negativeTwo: [13.8, 13.8, 13.7, 13.7, 13.6, 13.6, 13.6, 13.5, 13.5, 13.5, 13.4, 13.4, 13.4, 13.3, 13.3, 13.3, 13.2, 13.2, 13.2, 13.2, 13.1, 13.1, 13.1, 13.1, 13.1, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 12.9, 12.9, 12.9, 12.9, 12.9],
                            negativeOne: [14.8, 14.8, 14.8, 14.7, 14.7, 14.7, 14.6, 14.6, 14.6, 14.5, 14.5, 14.5, 14.4, 14.4, 14.4, 14.3, 14.3, 14.3, 14.3, 14.2, 14.2, 14.2, 14.2, 14.2, 14.1, 14.1, 14.1, 14.1, 14.1, 14.1, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0],
                            zero: [16.0, 16.0, 15.9, 15.9, 15.9, 15.8, 15.8, 15.8, 15.7, 15.7, 15.7, 15.6, 15.6, 15.6, 15.5, 15.5, 15.5, 15.5, 15.4, 15.4, 15.4, 15.4, 15.4, 15.3, 15.3, 15.3, 15.3, 15.3, 15.3, 15.3, 15.3, 15.2, 15.2, 15.2, 15.2, 15.2, 15.2],
                            positiveOne: [17.3, 17.3, 17.3, 17.2, 17.2, 17.1, 17.1, 17.1, 17.0, 17.0, 17.0, 16.9, 16.9, 16.9, 16.8, 16.8, 16.8, 16.8, 16.8, 16.7, 16.7, 16.7, 16.7, 16.7, 16.7, 16.7, 16.7, 16.6, 16.6, 16.6, 16.6, 16.6, 16.6, 16.6, 16.6, 16.6, 16.6],
                            positiveTwo: [18.9, 18.8, 18.8, 18.7, 18.7, 18.6, 18.6, 18.5, 18.5, 18.5, 18.4, 18.4, 18.4, 18.3, 18.3, 18.3, 18.2, 18.2, 18.2, 18.2, 18.2, 18.2, 18.2, 18.2, 18.2, 18.2, 18.2, 18.2, 18.2, 18.2, 18.2, 18.2, 18.2, 18.2, 18.3, 18.3, 18.3],
                            positiveThree: [20.6, 20.5, 20.5, 20.4, 20.4, 20.3, 20.2, 20.2, 20.1, 20.1, 20.0, 20.0, 20.0, 19.9, 19.9, 19.9, 19.9, 19.9, 19.8, 19.8, 19.8, 19.8, 19.8, 19.9, 19.9, 19.9, 19.9, 19.9, 19.9, 20.0, 20.0, 20.0, 20.1, 20.1, 20.2, 20.2, 20.3],
                            xLabels: [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60]
                        }
                    },
                    girl: {
                        two: {
                            negativeThree: [10.1, 10.8, 11.8, 12.4, 12.7, 12.9, 13.0, 13.0, 13.0, 12.9, 12.9, 12.8, 12.7, 12.6, 12.6, 12.5, 12.4, 12.4, 12.3, 12.3, 12.2, 12.2, 12.2, 12.2, 12.1],
                            negativeTwo: [11.1, 12.0, 13.0, 13.6, 13.9, 14.1, 14.1, 14.2, 14.1, 14.1, 14.0, 13.9, 13.8, 13.7, 13.6, 13.5, 13.5, 13.4, 13.3, 13.3, 13.2, 13.2, 13.1, 13.1, 13.1],
                            negativeOne: [12.2, 13.2, 14.3, 14.9, 15.2, 15.4, 15.5, 15.5, 15.4, 15.3, 15.2, 15.1, 15.0, 14.9, 14.8, 14.7, 14.6, 14.5, 14.4, 14.4, 14.3, 14.3, 14.2, 14.2, 14.2],
                            zero: [13.3, 14.6, 15.8, 16.4, 16.7, 16.8, 16.9, 16.9, 16.8, 16.7, 16.6, 16.5, 16.4, 16.2, 16.1, 16.0, 15.9, 15.8, 15.7, 15.7, 15.6, 15.5, 15.5, 15.4, 15.4],
                            positiveOne: [14.6, 16.0, 17.3, 17.9, 18.3, 18.4, 18.5, 18.5, 18.4, 18.3, 18.2, 18.0, 17.9, 17.7, 17.6, 17.5, 17.4, 17.3, 17.2, 17.1, 17.0, 17.0, 16.9, 16.9, 16.8],
                            positiveTwo: [16.1, 17.5, 19.0, 19.7, 20.0, 20.2, 20.3, 20.3, 20.2, 20.1, 19.9, 19.8, 19.6, 19.5, 19.3, 19.2, 19.1, 18.9, 18.8, 18.8, 18.7, 18.6, 18.5, 18.5, 18.4],
                            positiveThree: [17.7, 19.1, 20.7, 21.5, 22.0, 22.2, 22.3, 22.3, 22.2, 22.1, 21.9, 21.8, 21.6, 21.4, 21.3, 21.1, 21.0, 20.9, 20.8, 20.7, 20.6, 20.5, 20.4, 20.4, 20.3],
                            xLabels: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]
                        },
                        five: {
                            negativeThree: [12.4, 12.4, 12.3, 12.3, 12.3, 12.3, 12.3, 12.2, 12.2, 12.2, 12.2, 12.1, 12.1, 12.1, 12.1, 12.0, 12.0, 12.0, 12.0, 11.9, 11.9, 11.9, 11.9, 11.8, 11.8, 11.8, 11.8, 11.8, 11.7, 11.7, 11.7, 11.7, 11.7, 11.7, 11.7, 11.6, 11.6],
                            negativeTwo: [13.3, 13.3, 13.3, 13.3, 13.3, 13.2, 13.2, 13.2, 13.2, 13.1, 13.1, 13.1, 13.1, 13.1, 13.0, 13.0, 13.0, 13.0, 12.9, 12.9, 12.9, 12.9, 12.9, 12.8, 12.8, 12.8, 12.8, 12.8, 12.8, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7, 12.7],
                            negativeOne: [14.4, 14.4, 14.4, 14.4, 14.3, 14.3, 14.3, 14.3, 14.3, 14.2, 14.2, 14.2, 14.2, 14.1, 14.1, 14.1, 14.1, 14.1, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 13.9, 13.9, 13.9, 13.9, 13.9, 13.9, 13.9, 13.9, 13.9, 13.9, 13.9, 13.9],
                            zero: [15.7, 15.7, 15.6, 15.6, 15.6, 15.6, 15.5, 15.5, 15.5, 15.5, 15.4, 15.4, 15.4, 15.4, 15.4, 15.3, 15.3, 15.3, 15.3, 15.3, 15.3, 15.3, 15.3, 15.3, 15.3, 15.3, 15.3, 15.3, 15.2, 15.3, 15.3, 15.3, 15.3, 15.3, 15.3, 15.3, 15.3],
                            positiveOne: [17.1, 17.1, 17.0, 17.0, 17.0, 17.0, 16.9, 16.9, 16.9, 16.9, 16.8, 16.8, 16.8, 16.8, 16.8, 16.8, 16.8, 16.8, 16.8, 16.8, 16.8, 16.8, 16.8, 16.8, 16.8, 16.8, 16.8, 16.8, 16.8, 16.8, 16.8, 16.8, 16.8, 16.9, 16.9, 16.9, 16.9],
                            positiveTwo: [18.7, 18.7, 18.7, 18.6, 18.6, 18.6, 18.5, 18.5, 18.5, 18.5, 18.5, 18.4, 18.4, 18.4, 18.4, 18.4, 18.4, 18.4, 18.4, 18.4, 18.5, 18.5, 18.5, 18.5, 18.5, 18.5, 18.6, 18.6, 18.6, 18.6, 18.7, 18.7, 18.7, 18.7, 18.8, 18.8, 18.8],
                            positiveThree: [20.6, 20.6, 20.6, 20.5, 20.5, 20.4, 20.4, 20.4, 20.4, 20.3, 20.3, 20.3, 20.3, 20.3, 20.3, 20.3, 20.3, 20.4, 20.4, 20.4, 20.4, 20.5, 20.5, 20.5, 20.6, 20.6, 20.7, 20.7, 20.7, 20.8, 20.8, 20.9, 20.9, 21.0, 21.0, 21.0, 21.1],
                            xLabels: [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60]
                        }
                    }
                };
                function zScore(value, mean, values) {
                    var aux = null;
                    if (value && values && values.length > 0) {
                        var meanValues = null;
                        $.each(values, function (index, item) {
                            meanValues += item;
                        });
                        meanValues = meanValues / values.length;
                        $.each(values, function (index, item) {
                            aux += Math.pow(item - meanValues, 2);
                        });
                        //Variance
                        aux = aux / (values.length - 1);
                        //Standard desviation
                        aux = Math.sqrt(aux);
                        aux = (value - mean) / aux;
                    }
                    return aux;
                }
                function zScoreValueXAge(param) {
                    var aux = null;
                    if (param.value && param.x && param.age && param.sex && param.x) {
                        var lines = ['positiveOne', 'positiveTwo', 'positiveThree'];
                        var range = param.age <= 24 ? 'two' : 'five';
                        // 0 = male, 1 = female
                        param.sex = param.sex === '0' ? 'boy' : 'girl';
                        var values = [];
                        $.each(lines, function (index, line) {
                            values.push(param.dataValues[param.sex][range][line][param.x]);
                        });
                        var mean = param.dataValues[param.sex][range]['zero'][param.x];
                        aux = zScore(param.value, mean, values);
                    }
                    return aux;
                }
                function dataGraphicValueXAge(param) {
                    var valueXAge = null;
                    if (param.value && param.age) {
                        valueXAge = {
                            data: {
                                'LINEAS': [],
                                'state': true
                            },
                            conf: {
                                'Tittle': param.title,
                                'Xtittle': param.xTitle,
                                'Ytittle': param.yTitle,
                                'scale': param.scale || 1,
                                'Xlabels': [],
                                'state': true
                            }
                        };
                        var data = null;
                        param.age = param.age - (param.age % 1);
                        // 0 male, 1 female
                        var sex = param.sex === '0' ? 'boy' : 'girl';
                        data = param.age <= 24 ? param.dataValues[sex].two : param.dataValues[sex].five;
                        valueXAge.conf.Xlabels = [];
                        var lines = [{item: 'zero', label: '0', rgb: {r: '0', g: '255', b: '0'}},
                            {item: 'negativeOne', label: '-1', rgb: {r: '255', g: '255', b: '0'}},
                            {item: 'positiveOne', label: '+1', rgb: {r: '255', g: '255', b: '0'}},
                            {item: 'negativeTwo', label: '-2', rgb: {r: '255', g: '128', b: '0'}},
                            {item: 'positiveTwo', label: '+2', rgb: {r: '255', g: '128', b: '0'}},
                            {item: 'negativeThree', label: '-3', rgb: {r: '255', g: '0', b: '0'}},
                            {item: 'positiveThree', label: '+3', rgb: {r: '255', g: '0', b: '0'}}];
                        valueXAge.data['LINEAS'].push({'area': false, 'label': 'Paciente', 'dataR': [], 'colorR': '0', 'colorG': '0', 'colorB': '0', 'colorBR': '0', 'colorBG': '0', 'colorBB': '0'});
                        $.each(lines, function (index, line) {
                            if (data[line.item]) {
                                valueXAge.data['LINEAS'].push({'area': false, 'label': line.label, 'dataR': [], 'colorR': line.rgb.r, 'colorG': line.rgb.g, 'colorB': line.rgb.b, 'colorBR': line.rgb.r, 'colorBG': line.rgb.g, 'colorBB': line.rgb.b});
                            }
                        });
                        $.each(data.xLabels, function (index, x) {
                            var label = (x > 0 && x % 12 === 0) ? (x / 12) + ' Año(s)' : String(x);
                            valueXAge.conf.Xlabels.push(label);
                            if (x === (param.age)) {
                                valueXAge.data['LINEAS'][0].dataR.push({x: x, y: param.value});
                            } else {
                                valueXAge.data['LINEAS'][0].dataR.push({x: x, y: null});
                            }
                            $.each(lines, function (index1, line) {
                                if (data[line.item]) {
                                    valueXAge.data['LINEAS'][index1 + 1].dataR.push({x: x, y: data[line.item][index]});
                                }
                            });
                        });
                    }
                    return valueXAge;
                }
                function dataGraphicImcPregnant(values, imc, pregnantAge) {
                    var weeksPregnant = null;
                    if (imc && pregnantAge) {
                        weeksPregnant = {
                            data: {
                                'LINEAS': [],
                                'state': true
                            },
                            conf: {
                                'Tittle': 'Estado Nutricional IMC Gestacional',
                                'Xtittle': 'Semanas de gestacion',
                                'Ytittle': 'IMC',
                                'scale': 2,
                                'Xlabels': [],
                                'state': true
                            }
                        };
                        weeksPregnant.data['LINEAS'].push({'area': true, 'label': 'Paciente', 'dataR': [], 'colorR': '0', 'colorG': '0', 'colorB': '0', 'colorBR': '0', 'colorBG': '0', 'colorBB': '0'});
                        weeksPregnant.data['LINEAS'].push({'area': true, 'label': 'Bajo peso', 'dataR': [], 'colorR': '255', 'colorG': '0', 'colorB': '0', 'colorBR': '255', 'colorBG': '0', 'colorBB': '0'});
                        weeksPregnant.data['LINEAS'].push({'area': true, 'label': 'Normal', 'dataR': [], 'colorR': '0', 'colorG': '255', 'colorB': '0', 'colorBR': '0', 'colorBG': '255', 'colorBB': '0'});
                        weeksPregnant.data['LINEAS'].push({'area': true, 'label': 'Sobrepeso', 'dataR': [], 'colorR': '0', 'colorG': '0', 'colorB': '255', 'colorBR': '0', 'colorBG': '0', 'colorBB': '255'});
                        weeksPregnant.data['LINEAS'].push({'area': true, 'label': 'Obesidad', 'dataR': [], 'colorR': '0', 'colorG': '255', 'colorB': '255', 'colorBR': '255', 'colorBG': '255', 'colorBB': '255'});
                        $.each(Object.keys(values), function (index, key) {
                            weeksPregnant.conf.Xlabels.push(String(key));
                            weeksPregnant.data['LINEAS'][1].dataR.push({x: key, y: values[key].thin});
                            weeksPregnant.data['LINEAS'][2].dataR.push({x: key, y: values[key].normal.to});
                            weeksPregnant.data['LINEAS'][3].dataR.push({x: key, y: values[key].weight.to});
                            weeksPregnant.data['LINEAS'][4].dataR.push({x: key, y: values[key].obesity});
                            if (key === String(pregnantAge)) {
                                weeksPregnant.data['LINEAS'][0].dataR.push({x: key, y: imc});
                            } else {
                                weeksPregnant.data['LINEAS'][0].dataR.push({x: key, y: null});
                            }
                        });
                    }
                    return weeksPregnant;
                }
                function dataGraphicWeightSize(weight, size, age, sex) {
                    var weightSize = null;
                    if (weight && size && age) {
                        var weightSize = {
                            data: {
                                'LINEAS': [],
                                'state': true
                            },
                            conf: {
                                'Tittle': 'Peso para talla',
                                'Xtittle': 'Talla(cm)',
                                'Ytittle': 'Peso(kg)',
                                'scale': 1,
                                'Xlabels': [],
                                'state': true
                            }
                        };
                        var data = null;
                        age = age - (age % 1);
                        size = size - (size % 0.5);
                        // 0 male, 1 female
                        sex = sex === '0' ? 'boy' : 'girl';
                        data = age <= 24 ? weightSizeData[sex].two : weightSizeData[sex].five;
                        weightSize.conf.Xlabels = [];
                        var lines = [{item: 'zero', label: '0', rgb: {r: '0', g: '255', b: '0'}},
                            {item: 'negativeOne', label: '-1', rgb: {r: '255', g: '255', b: '0'}},
                            {item: 'positiveOne', label: '+1', rgb: {r: '255', g: '255', b: '0'}},
                            {item: 'negativeTwo', label: '-2', rgb: {r: '255', g: '128', b: '0'}},
                            {item: 'positiveTwo', label: '+2', rgb: {r: '255', g: '128', b: '0'}},
                            {item: 'negativeThree', label: '-3', rgb: {r: '255', g: '0', b: '0'}},
                            {item: 'positiveThree', label: '+3', rgb: {r: '255', g: '0', b: '0'}}];
                        weightSize.data['LINEAS'].push({'area': false, 'label': 'Paciente', 'dataR': [], 'colorR': '0', 'colorG': '0', 'colorB': '0', 'colorBR': '0', 'colorBG': '0', 'colorBB': '0'});
                        $.each(lines, function (index, line) {
                            if (data[line.item]) {
                                weightSize.data['LINEAS'].push({'area': false, 'label': line.label, 'dataR': [], 'colorR': line.rgb.r, 'colorG': line.rgb.g, 'colorB': line.rgb.b, 'colorBR': line.rgb.r, 'colorBG': line.rgb.g, 'colorBB': line.rgb.b});
                            }
                        });
                        $.each(data.xLabels, function (index, x) {
                            weightSize.conf.Xlabels.push(x);
                            if (x === size) {
                                weightSize.data['LINEAS'][0].dataR.push({x: x, y: weight});
                            } else {
                                weightSize.data['LINEAS'][0].dataR.push({x: x, y: null});
                            }
                            $.each(lines, function (index1, line) {
                                if (data[line.item]) {
                                    weightSize.data['LINEAS'][index1 + 1].dataR.push({x: x, y: data[line.item][index]});
                                }
                            });
                        });
                    }
                    return weightSize;
                }
                return {
                    dataImcPregnant: nutritionalData,
                    dataGraphicImcPregnant: function (imc, pregnantAge) {
                        return dataGraphicImcPregnant(nutritionalData, imc, pregnantAge);
                    },
                    dataGraphicSizeAge: function (size, age, sex) {
                        return dataGraphicValueXAge({value: size, age: age, sex: sex, scale: 5, title: 'Talla por edad', xTitle: 'Edad(meses/años cumplidos)', yTitle: 'Talla(cm)', dataValues: sizeAgeData});
                    },
                    zScoreSizeAge: function (size, age, sex) {
                        age -= age % 1;
                        return zScoreValueXAge({value: size, age: age, sex: sex, x: age - (age <= 24 ? 0 : 24), dataValues: sizeAgeData});
                    },
                    dataGraphicWeightAge: function (weight, age, sex) {
                        return dataGraphicValueXAge({value: weight, age: age, sex: sex, title: 'Peso por edad', xTitle: 'Edad(meses/años cumplidos)', yTitle: 'Peso(kg)', dataValues: weightAgeData});
                    },
                    zScoreWeightAge: function (weight, age, sex) {
                        age -= age % 1;
                        return zScoreValueXAge({value: weight, age: age, sex: sex, x: age - (age <= 24 ? 0 : 24), dataValues: weightAgeData});
                    },
                    dataGraphicImcAge: function (imc, age, sex) {
                        return dataGraphicValueXAge({value: imc, age: age, sex: sex, title: 'Imc por edad', xTitle: 'Edad(meses/años cumplidos)', yTitle: 'Indice de Masa Corporal', dataValues: imcAgeData});
                    },
                    zScoreImcAge: function (imc, age, sex) {
                        age -= age % 1;
                        return zScoreValueXAge({value: imc, age: age, sex: sex, x: age - (age <= 24 ? 0 : 24), dataValues: imcAgeData});
                    },
                    dataGraphicWeightSize: function (weight, size, age, sex) {
                        return dataGraphicWeightSize(weight, size, age, sex);
                    },
                    zScoreWeightSize: function (weight, size, age, sex) {
                        return zScoreValueXAge({value: weight, age: age, sex: sex, x: (size - (age <= 24 ? 45.0 : 65.0)) * 2, dataValues: weightSizeData});
                    }
                };
            }])
        .controller("AntroController", ['antroprometricService', function (antroprometricService) {
                var ctrl = this;
                ctrl.graphicPregnant = null;
                ctrl.graphicSizeAge = null;
                ctrl.graphicWeightAge = null;
                ctrl.graphicImcAge = null;
                ctrl.graphicWeightSize = null;
                ctrl.zScoreWeightAge = null;
                ctrl.zScoreSizeAge = null;
                ctrl.zScoreImcAge = null;
                ctrl.zScoreWeightSize = null;
                ctrl.imc = null;
                ctrl.nutritionalState = null;
                ctrl.obesityClasification = null;
                ctrl.abdominalObsesity = null;
                ctrl.idealWeigth = null;
                ctrl.cardiovascularRisk = null;
                ctrl.age = null;
                ctrl.vitalMoment = null;
                ctrl.pregnantNutritionalState = null;
                ctrl.ageSize = null;
                ctrl.ageWeight = null;
                ctrl.sizeWeight = null;
                ctrl.headCircunference = null;
                ctrl.headCircunferenceAge = null;
                ctrl.imcAge = null;
                ctrl.armCircunference = null;
                ctrl.kidVitalMoment = null;
                ctrl.approximateAge = null;
                ctrl.drawimcAge = false;
                ctrl.drawweeksPregnant = false;
                ctrl.drawsizeAge = false;
                ctrl.drawweightAge = false;
                ctrl.drawweightSize = false;
                ctrl.showModal = function (idModal) {
                    ctrl['draw' + idModal] = !ctrl['draw' + idModal];
                    $('#' + idModal).modal('show');
                };
                ctrl.$onChanges = function (obj) {
                    if (obj['cleanData'] && obj['cleanData'].currentValue) {
                        $.each(Object.keys(ctrl), function (index, key) {
                            if ($.type(ctrl[key]) !== 'boolean') {
                                ctrl[key] = null;
                            }
                        });
                    }
                    if (obj['headCircunference'] && obj['headCircunference'].currentValue) {
                        ctrl.headCircunferenceAge = headCircunferenceAge(obj['headCircunference'].currentValue, ctrl.approximateAge);
                    }
                    if (obj['armCircunference'] && obj['armCircunference'].currentValue) {
                        ctrl.armCircunferenceAge = armCircunferenceAge(obj['armCircunference'].currentValue, ctrl.approximateAge);
                    }
                    if (obj['weigth'] && obj['weigth'].currentValue) {
                        ctrl.imc = calculateIMC(obj['weigth'].currentValue, ctrl.size);
                        ctrl.zScoreWeightAge = antroprometricService.zScoreWeightAge(obj['weigth'].currentValue, ctrl.approximateAge, ctrl.sex);
                        ctrl.zScoreImcAge = antroprometricService.zScoreImcAge(ctrl.imc, ctrl.approximateAge, ctrl.sex);
                        ctrl.zScoreWeightSize = antroprometricService.zScoreWeightSize(obj['weigth'].currentValue, ctrl.size, ctrl.approximateAge, ctrl.sex);
                        ctrl.imcAge = imcAge(ctrl.zScoreImcAge, ctrl.approximateAge);
                        ctrl.ageWeight = ageWeight(ctrl.zScoreWeightAge);
                        ctrl.sizeWeight = sizeWeight(ctrl.zScoreWeightSize);
                        ctrl.nutritionalState = nutritionalState(ctrl.imc);
                        ctrl.obesityClasification = obesityClasification(ctrl.imc);
                        ctrl.pregnantNutritionalState = pregnantNutritionalState(ctrl.imc, ctrl.pregnantAge);
                        ctrl.graphicWeightAge = antroprometricService.dataGraphicWeightAge(obj['weigth'].currentValue, ctrl.approximateAge, ctrl.sex);
                        ctrl.graphicImcAge = antroprometricService.dataGraphicImcAge(ctrl.imc, ctrl.approximateAge, ctrl.sex);
                        ctrl.graphicWeightSize = antroprometricService.dataGraphicWeightSize(obj['weigth'].currentValue, ctrl.size, ctrl.approximateAge, ctrl.sex);
                    }
                    if (obj['size'] && obj['size'].currentValue) {
                        ctrl.imc = calculateIMC(ctrl.weigth, obj['size'].currentValue);
                        ctrl.zScoreSizeAge = antroprometricService.zScoreSizeAge(obj['size'].currentValue, ctrl.approximateAge, ctrl.sex);
                        ctrl.zScoreImcAge = antroprometricService.zScoreImcAge(ctrl.imc, ctrl.approximateAge, ctrl.sex);
                        ctrl.zScoreWeightSize = antroprometricService.zScoreWeightSize(ctrl.weigth, obj['size'].currentValue, ctrl.approximateAge, ctrl.sex);
                        ctrl.imcAge = imcAge(ctrl.zScoreImcAge, ctrl.approximateAge);
                        ctrl.ageSize = ageSize(ctrl.zScoreSizeAge);
                        ctrl.sizeWeight = sizeWeight(ctrl.zScoreWeightSize);
                        ctrl.nutritionalState = nutritionalState(ctrl.imc);
                        ctrl.obesityClasification = obesityClasification(ctrl.imc);
                        ctrl.pregnantNutritionalState = pregnantNutritionalState(ctrl.imc, ctrl.pregnantAge);
                        ctrl.graphicSizeAge = antroprometricService.dataGraphicSizeAge(obj['size'].currentValue, ctrl.approximateAge, ctrl.sex);
                        ctrl.graphicImcAge = antroprometricService.dataGraphicImcAge(ctrl.imc, ctrl.approximateAge, ctrl.sex);
                        ctrl.graphicWeightSize = antroprometricService.dataGraphicWeightSize(ctrl.weigth, obj['size'].currentValue, ctrl.approximateAge, ctrl.sex);
                    }
                    if (obj['pregnantAge'] && obj['pregnantAge'].currentValue) {
                        ctrl.imc = calculateIMC(ctrl.weigth, ctrl.size);
                        ctrl.pregnantNutritionalState = pregnantNutritionalState(ctrl.imc, ctrl.pregnantAge);
                    }
                    if (obj['sex'] && obj['sex'].currentValue) {
                        ctrl.abdominalObsesity = abdominalObsesity(ctrl.waistCircunference, obj['sex'].currentValue);
                    }
                    if (obj['waistCircunference'] && obj['waistCircunference'].currentValue) {
                        ctrl.abdominalObsesity = abdominalObsesity(obj['waistCircunference'].currentValue, ctrl.sex);
                    }
                    if (obj['birthdate'] && obj['birthdate'].currentValue) {
                        ctrl.age = calculateAge(obj['birthdate'].currentValue);
                        ctrl.approximateAge = approximateAge(ctrl.age);
                        ctrl.zScoreWeightAge = antroprometricService.zScoreWeightAge(ctrl.weigth, ctrl.approximateAge, ctrl.sex);
                        ctrl.zScoreSizeAge = antroprometricService.zScoreSizeAge(ctrl.size, ctrl.approximateAge, ctrl.sex);
                        ctrl.zScoreImcAge = antroprometricService.zScoreImcAge(ctrl.imc, ctrl.approximateAge, ctrl.sex);
                        ctrl.zScoreWeightSize = antroprometricService.zScoreWeightSize(ctrl.weigth, ctrl.size, ctrl.approximateAge, ctrl.sex);
                        ctrl.imcAge = imcAge(ctrl.zScoreImcAge, ctrl.approximateAge);
                        ctrl.ageSize = ageSize(ctrl.zScoreSizeAge);
                        ctrl.ageWeight = ageWeight(ctrl.zScoreWeightAge);
                        ctrl.sizeWeight = sizeWeight(ctrl.zScoreWeightSize);
                        ctrl.headCircunferenceAge = headCircunferenceAge(ctrl.headCircunference, ctrl.approximateAge);
                        ctrl.armCircunferenceAge = armCircunferenceAge(ctrl.armCircunference, ctrl.approximateAge);
                        ctrl.kidVitalMoment = kidVitalMoment(ctrl.approximateAge);
                        ctrl.vitalMoment = vitalMoment(ctrl.age);
                        ctrl.graphicSizeAge = antroprometricService.dataGraphicSizeAge(ctrl.size, ctrl.approximateAge, ctrl.sex);
                        ctrl.graphicWeightAge = antroprometricService.dataGraphicWeightAge(ctrl.weigth, ctrl.approximateAge, ctrl.sex);
                        ctrl.graphicImcAge = antroprometricService.dataGraphicImcAge(ctrl.imc, ctrl.approximateAge, ctrl.sex);
                        ctrl.graphicWeightSize = antroprometricService.dataGraphicWeightSize(ctrl.weigth, ctrl.size, ctrl.approximateAge, ctrl.sex);
                    }
                };
                function kidVitalMoment(approximateAge) {
                    var value = null;
                    if (approximateAge) {
                        if (approximateAge <= 59) {
                            value = 'Primera infancia';
                        } else if (approximateAge >= 60 && approximateAge <= 143) {
                            value = 'Infancia';
                        } else if (approximateAge >= 144 && approximateAge <= 215) {
                            value = 'Adolescencia';
                        }
                    }
                    return value;
                }
                function approximateAge(age) {
                    var value = 0;
                    if (age) {
                        if (age.year) {
                            value = age.year * 12;
                        }
                        if (age.month) {
                            value += age.month;
                        }
                        if (age.day) {
                            if (age.day > 10 && age.day <= 20) {
                                value += 0.5;
                            } else if (age.day > 20 && age.day <= 29) {
                                value += 1;
                            }
                        }
                    }
                    return value;
                }
                function armCircunferenceAge(armCircunference, age) {
                    var value = null;
                    if (age && armCircunference && age >= 6 && age <= 59) {
                        var aux = armCircunference;
                        if (aux >= 13.5) {
                            value = 'Normal';
                        } else if (aux >= 12.5 && aux <= 13.4) {
                            value = 'Riesgo de desnutricion';
                        } else if (aux >= 11.5 && aux <= 12.4) {
                            value = 'Desnutricion moderada';
                        } else if (aux < 11.5) {
                            value = 'Riesgo de muerte por desnutricion';
                        }
                    }
                    return value;
                }
                function headCircunferenceAge(headCircunference, age) {
                    var value = null;
                    if (age && headCircunference && age > 0 && age <= 60) {
                        var aux = headCircunference / age;
                        if (aux <= -4.0) {
                            value = 'Fuera Izquierda';
                        } else if (aux < -2.0 && aux > -4.0) {
                            value = 'Factor de riesgo para neurodesarrollo';
                        } else if (aux >= -2.0 && aux <= 2.0) {
                            value = 'Normal';
                        } else if (aux > 2.0 && aux < 4.0) {
                            value = 'Factor de riesgo para neurodesarrollo';
                        } else if (aux >= 4.0) {
                            value = 'Fuera derecha';
                        }
                    }
                    return value;
                }
                function sizeWeight(zScore) {
                    var value = null;
                    if (zScore) {
                        if (zScore <= -4.0) {
                            value = 'Fuera Izquierda';
                        } else if (zScore < -3.0 && zScore > -4.0) {
                            value = 'Desnutricion aguda severa';
                        } else if (zScore < -2.0 && zScore >= -3.0) {
                            value = 'Desnutricion aguda moderada';
                        } else if (zScore >= -2.0 && zScore < -1.0) {
                            value = 'Riesgo de desnutricion aguda';
                        } else if (zScore >= -1.0 && zScore < 1.0) {
                            value = 'Peso adecuado para talla';
                        } else if (zScore >= 1.0 && zScore < 2.0) {
                            value = 'Riesgo sobrepeso';
                        } else if (zScore >= 2.0 && zScore < 3.0) {
                            value = 'Sobrepeso';
                        } else if (zScore >= 3.0 && zScore < 4.0) {
                            value = 'Obesidad';
                        } else if (zScore >= 4.0) {
                            value = 'Fuera derecha';
                        }
                    }
                    return value;
                }
                function ageSize(zScore) {
                    var value = null;
                    if (zScore) {
                        if (zScore <= -4.0) {
                            value = 'Fuera Izquierda';
                        } else if (zScore < -2.0 && zScore > -4.0) {
                            value = 'Talla baja para edad';
                        } else if (zScore >= -2.0 && zScore < -1.0) {
                            value = 'Riesgo de talla baja';
                        } else if (zScore >= -1.0 && zScore < 4.0) {
                            value = 'Talla adecuada para edad';
                        } else if (zScore >= 4.0) {
                            value = 'Fuera derecha';
                        }
                    }
                    return value;
                }
                function ageWeight(zScore) {
                    var value = null;
                    if (zScore) {
                        if (zScore <= -4.0) {
                            value = 'Fuera Izquierda';
                        } else if (zScore < -2.0 && zScore > -4.0) {
                            value = 'Desnutricion global';
                        } else if (zScore >= -2.0 && zScore < -1.0) {
                            value = 'Riesgo de desnutricion global';
                        } else if (zScore >= -1.0 && zScore <= 1.0) {
                            value = 'Peso adecuado para edad';
                        } else if (zScore >= 1.0 && zScore < 4.0) {
                            value = 'No Aplica';
                        } else if (zScore >= 4.0) {
                            value = 'Fuera derecha';
                        }
                    }
                    return value;
                }
                function imcAge(zScore, age) {
                    var value = null;
                    if (zScore && age) {
                        //De 0 a 5 años
                        if (age > 0 && age <= 60) {
                            if (zScore <= -4) {
                                value = 'Fuera izquierda';
                            } else if (zScore < 1 && zScore > -4) {
                                value = 'No aplica';
                            } else if (zScore >= 1 && zScore < 2) {
                                value = 'Riesgo sobrepeso';
                            } else if (zScore >= 2 && zScore < 3) {
                                value = 'Sobrepeso';
                            } else if (zScore >= 3 && zScore < 4) {
                                value = 'Obesidad';
                            } else if (zScore >= 4) {
                                value = 'Fuera derecha';
                            }
                            //de 5 hasta 18 años
                        } else if (age > 60 && age <= 216) {
                            if (zScore <= -4) {
                                value = 'Fuera izquierda';
                            } else if (zScore < -2 && zScore > -4) {
                                value = 'Desnutricion o delgadez';
                            } else if (zScore >= -2 && zScore < -1) {
                                value = 'Riesgo de desnutricion o delgadez';
                            } else if (zScore >= -1 && zScore <= 1) {
                                value = 'IMC adecuado para la edad';
                            } else if (zScore > 1 && zScore <= 2) {
                                value = 'Sobrepeso';
                            } else if (zScore > 2 && zScore < 4) {
                                value = 'Obesidad';
                            } else if (zScore >= 4) {
                                value = 'Fuera derecha';
                            }
                        }
                    }
                    return value;
                }
                function pregnantNutritionalState(imc, pregnantAge) {
                    var value = null;
                    var data = antroprometricService.dataImcPregnant;
                    if (imc && pregnantAge && pregnantAge > 0) {
                        if (imc > data[pregnantAge].obesity) {
                            value = 'Obesidad para la edad gestacional';
                        } else if (imc >= data[pregnantAge].weight.from && imc <= data[pregnantAge].weight.to) {
                            value = 'Sobrepeso para la edad gestacional';
                        } else if (imc >= data[pregnantAge].normal.from && imc <= data[pregnantAge].normal.to) {
                            value = 'IMC adecuado para la edad gestacional';
                        } else if (imc < data[pregnantAge].thin) {
                            value = 'Bajo peso para la edad gestacional';
                        }
                        ctrl.graphicPregnant = antroprometricService.dataGraphicImcPregnant(imc, pregnantAge);
                    }
                    return value;
                }
                function calculateAge(birthdate) {
                    var now = new Date();
                    var age = {year: null, month: null, day: null};
                    if (birthdate && now > birthdate) {
                        var y = [now.getFullYear(), birthdate.getFullYear()];
                        var ydiff = y[0] - y[1];
                        var m = [now.getMonth(), birthdate.getMonth()];
                        var mdiff = m[0] - m[1];
                        var d = [now.getDate(), birthdate.getDate()];
                        var ddiff = d[0] - d[1];
                        if (mdiff < 0 || (mdiff === 0 && ddiff < 0))
                            --ydiff;
                        if (mdiff < 0)
                            mdiff += 12;
                        if (ddiff < 0) {
                            birthdate.setMonth(m[1] + 1, 0);
                            ddiff = birthdate.getDate() - d[1] + d[0];
                            --mdiff;
                        }
                        if (ydiff > 0)
                            age.year = ydiff;
                        if (mdiff > 0)
                            age.month = mdiff;
                        if (ddiff > 0)
                            age.day = ddiff;
                    }
                    return age;
                }
                function vitalMoment(age) {
                    var value = null;
                    if (age && age.year && age.month && age.day) {
                        if (age.year >= 18 && age.year <= 28) {
                            value = 'Joven';
                        } else if (age.year >= 29 && age.year <= 59) {
                            value = 'Adulto';
                        } else if (age.year >= 60) {
                            value = 'Anciano';
                        }
                    }
                    return value;
                }
                function calculateIMC(weight, size) {
                    if (weight && size && size > 0.0) {
                        return weight / Math.pow((size / 100), 2);
                    } else {
                        return null;
                    }
                }
                function nutritionalState(imc) {
                    var value = null;
                    if (imc) {
                        if (imc < 18.5) {
                            value = 'Delgadez';
                        } else if (imc >= 18.5 && imc < 25.0) {
                            value = 'Normal';
                        } else if (imc >= 25.0 && imc <= 30.0) {
                            value = 'Sobrepeso';
                        } else if (imc >= 30.0) {
                            value = 'Obesidad';
                        }
                    }
                    return value;
                }
                function obesityClasification(imc) {
                    var value = null;
                    if (imc) {
                        if (imc >= 30.0 && imc < 34.9) {
                            value = 'Obesidad grado I';
                        } else if (imc >= 35.0 && imc < 39.9) {
                            value = 'Obesidad grado II';
                        } else if (imc >= 40.0) {
                            value = 'Obesidad grado III';
                        }
                    }
                    return value;
                }
                function abdominalObsesity(waistCircunference, sex) {
                    var value = null;
                    //sex 0 male, 1 female, 2 indeterminate
                    if (waistCircunference && sex && /^(0|1)$/.test(sex)) {
                        if (waistCircunference >= 90.0 && sex === '0') {
                            value = 'Con obesidad abdominal';
                        }
                        if (waistCircunference >= 80.0 && sex === '1') {
                            value = 'Con obesidad abdominal';
                        }
                    }
                    return value;
                }
            }
        ]);

